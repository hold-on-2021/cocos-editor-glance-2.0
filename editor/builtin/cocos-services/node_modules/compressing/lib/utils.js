"use strict";const e=require("fs"),r=require("path"),t=require("mkdirp"),n=require("pump");function o(e){if("function"==typeof e._write||"function"==typeof e._transform)return"stream";if("string"!=typeof e){const e=new Error("Type is not supported, must be a file path, or a writable stream");throw e.name="IlligalDestinationError",e}return"path"}exports.sourceType=(e=>{if(e){if(e instanceof Buffer)return"buffer";if("function"==typeof e._read||"function"==typeof e._transform)return"stream";if("string"!=typeof e){const e=new Error("Type is not supported, must be a file path, file buffer, or a readable stream");throw e.name="IlligalSourceError",e}return"file"}}),exports.destType=o;const i=new Error("Type is not supported, must be a file path, directory path, file buffer, or a readable stream");function s(e){return new Promise((r,t)=>{n(e[0],e[1],e=>{if(e)return t(e);r()})})}i.name="IlligalEntryError",exports.entryType=(e=>{if(e){if(e instanceof Buffer)return"buffer";if("function"==typeof e._read||"function"==typeof e._transform)return"stream";if("string"!=typeof e)throw i;return"fileOrDir"}}),exports.clone=(e=>{const r={};for(const t in e)r[t]=e[t];return r}),exports.makeFileProcessFn=(r=>(t,n,i)=>{(i=i||{}).source=t;const f="path"===o(n)?e.createWriteStream(n):n;return s([new r(i),f])}),exports.makeCompressDirFn=(r=>(t,n,i)=>{const f="path"===o(n)?e.createWriteStream(n):n,a=new r;return a.addEntry(t,i),s([a,f])}),exports.makeUncompressFn=(i=>(s,f,a)=>{if((a=a||{}).source=s,"path"!==o(f)){const e=new Error("uncompress destination must be a directory");throw e.name="IlligalDestError",e}return new Promise((o,s)=>{t(f,p=>{if(p)return s(p);let u=0,c=0,l=!1;function m(){l&&u===c&&o()}new i(a).on("finish",()=>{l=!0,m()}).on("error",s).on("entry",(o,i,a)=>{if(i.on("end",a),"file"===o.type){const a=r.join(f,o.name);t(r.dirname(a),r=>{if(r)return s(r);u++,n(i,e.createWriteStream(a,{mode:o.mode}),e=>{if(e)return s(e);c++,m()})})}else t(r.join(f,o.name),e=>{if(e)return s(e);i.resume()})})})})}),exports.streamToBuffer=(e=>new Promise((r,t)=>{const n=[];e.on("readable",()=>{let r;for(;r=e.read();)n.push(r)}).on("end",()=>r(Buffer.concat(n))).on("error",e=>t(e))})),exports.safePipe=s,exports.stripFileName=((e,t,n)=>{Buffer.isBuffer(t)&&(t=t.toString()),-1!==t.indexOf("\\")&&(t=t.replace(/\\+/g,"/")),"/"===t[0]&&(t=t.replace(/^\/+/,""));let o=t.split("/");return-1!==o.indexOf("..")&&(t=r.normalize(t),"win32"===process.platform&&(t=t.replace(/\\+/g,"/")),t=t.replace(/(\.\.\/)+/,""),"directory"===n&&t&&"/"!==t[t.length-1]&&(t+="/"),o=t.split("/")),e=Math.min(e,o.length-1),o.slice(e).join("/")||"/"});