"use strict";const e=require("yauzl"),r=require("stream"),t=require("../base_write_stream"),i=require("../utils"),s=Symbol("ZipUncompressStream#yauzlCallback"),n=Symbol("ZipUncompressStream#stripName"),o={lazyEntries:!0,decodeStrings:!1};module.exports=class extends t{constructor(r){super(r=r||{}),this._chunks=[],this._strip=Number(r.strip)||0,this[s]=this[s].bind(this);const t=i.sourceType(r.source),n=this._yauzlOpts=Object.assign({},o,r.yauzl);return"file"===t?(e.open(r.source,n,this[s]),void 0):"buffer"===t?(e.fromBuffer(r.source,n,this[s]),void 0):"stream"===t?(i.streamToBuffer(r.source).then(r=>e.fromBuffer(r,n,this[s])).catch(e=>this.emit("error",e)),void 0):(this.on("pipe",r=>{r.unpipe(r),i.streamToBuffer(r).then(r=>{this._chunks.push(r),r=Buffer.concat(this._chunks),e.fromBuffer(r,n,this[s])}).catch(e=>this.emit("error",e))}),void 0)}_write(e){this._chunks.push(e)}[s](e,t){if(e)return this.emit("error",e);function i(){t.readEntry()}t.readEntry(),t.on("entry",e=>{const s=/\/$/.test(e.fileName)?"directory":"file",o={name:e.fileName=this[n](e.fileName,s),type:s,yauzl:e};if("file"===s)t.openReadStream(e,(e,r)=>{if(e)return this.emit("error",e);this.emit("entry",o,r,i)});else{const e=new r.Readable({read(){}});this.emit("entry",o,e,i),setImmediate(()=>e.emit("end"))}}).on("end",()=>this.emit("finish")).on("error",e=>this.emit("error",e))}[n](e,r){return i.stripFileName(this._strip,e,r)}};