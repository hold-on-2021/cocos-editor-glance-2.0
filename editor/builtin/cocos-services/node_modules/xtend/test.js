var a=require("tape"),e=require("./"),o=require("./mutable");a("merge",function(a){a.deepEqual(e({a:"foo"},{b:"bar"}),{a:"foo",b:"bar"}),a.end()}),a("replace",function(a){a.deepEqual(e({a:"foo"},{a:"bar"}),{a:"bar"}),a.end()}),a("undefined",function(a){var o={a:void 0},n={b:"foo"};a.deepEqual(e(o,n),{a:void 0,b:"foo"}),a.deepEqual(e(n,o),{a:void 0,b:"foo"}),a.end()}),a("handle 0",function(a){var o={a:"default"},n={a:0};a.deepEqual(e(o,n),{a:0}),a.deepEqual(e(n,o),{a:"default"}),a.end()}),a("is immutable",function(a){var o={};e(o,{foo:"bar"}),a.equal(o.foo,void 0),a.end()}),a("null as argument",function(a){a.deepEqual(e(null,{foo:"bar"},void 0),{foo:"bar"}),a.end()}),a("mutable",function(a){var e={foo:"bar"};o(e,{bar:"baz"}),a.equal(e.bar,"baz"),a.end()}),a("null prototype",function(a){var o=Object.create(null);o.b="bar",a.deepEqual(e({a:"foo"},o),{a:"foo",b:"bar"}),a.end()}),a("null prototype mutable",function(a){var e={foo:"bar"},n=Object.create(null);n.bar="baz",o(e,n),a.equal(e.bar,"baz"),a.end()});