"use strict";const t=require("buffer").Buffer;let e=require("./parser/utils").randomBytes;const i=require("util"),r=i.deprecate,n=e(5),s=new RegExp("^[0-9a-fA-F]{24}$");let o=!1;try{t&&t.from&&(o=!0)}catch(t){o=!1}const c=[];for(let t=0;t<256;t++)c[t]=(t<=15?"0":"")+t.toString(16);const a=[];let h=0;for(;h<10;)a[48+h]=h++;for(;h<16;)a[55+h]=a[87+h]=h++;const g=t;function d(t,e){const i=t[e];return new TypeError(`ObjectId string "${t}" contains invalid character "${i}" with character code (${t.charCodeAt(e)}). All character codes for a non-hex string must be less than 256.`)}class u{constructor(e){if(e instanceof u)return e;if(null==e||"number"==typeof e)return this.id=u.generate(e),u.cacheHexString&&(this.__id=this.toString("hex")),void 0;const i=u.isValid(e);if(!i&&null!=e)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(i&&"string"==typeof e&&24===e.length&&o)return new u(t.from(e,"hex"));if(i&&"string"==typeof e&&24===e.length)return u.createFromHexString(e);if(null==e||12!==e.length){if(null!=e&&e.toHexString)return u.createFromHexString(e.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=e,u.cacheHexString&&(this.__id=this.toString("hex"))}toHexString(){if(u.cacheHexString&&this.__id)return this.__id;let t="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof g)return t=function(t){return t.toString("hex")}(this.id),u.cacheHexString&&(this.__id=t),t;for(let e=0;e<this.id.length;e++){const i=c[this.id.charCodeAt(e)];if("string"!=typeof i)throw d(this.id,e);t+=i}return u.cacheHexString&&(this.__id=t),t}static getInc(){return u.index=(u.index+1)%16777215}static generate(e){"number"!=typeof e&&(e=~~(Date.now()/1e3));const i=u.getInc(),r=t.alloc(12);return r[3]=255&e,r[2]=e>>8&255,r[1]=e>>16&255,r[0]=e>>24&255,r[4]=n[0],r[5]=n[1],r[6]=n[2],r[7]=n[3],r[8]=n[4],r[11]=255&i,r[10]=i>>8&255,r[9]=i>>16&255,r}toString(t){return this.id&&this.id.copy?this.id.toString("string"==typeof t?t:"hex"):this.toHexString()}toJSON(){return this.toHexString()}equals(t){return t instanceof u?this.toString()===t.toString():"string"==typeof t&&u.isValid(t)&&12===t.length&&this.id instanceof g?t===this.id.toString("binary"):"string"==typeof t&&u.isValid(t)&&24===t.length?t.toLowerCase()===this.toHexString():"string"==typeof t&&u.isValid(t)&&12===t.length?t===this.id:!(null==t||!(t instanceof u||t.toHexString))&&t.toHexString()===this.toHexString()}getTimestamp(){const t=new Date,e=this.id.readUInt32BE(0);return t.setTime(1e3*Math.floor(e)),t}static createPk(){return new u}static createFromTime(e){const i=t.from([0,0,0,0,0,0,0,0,0,0,0,0]);return i[3]=255&e,i[2]=e>>8&255,i[1]=e>>16&255,i[0]=e>>24&255,new u(i)}static createFromHexString(e){if(void 0===e||null!=e&&24!==e.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(o)return new u(t.from(e,"hex"));const i=new g(12);let r=0,n=0;for(;n<24;)i[r++]=a[e.charCodeAt(n++)]<<4|a[e.charCodeAt(n++)];return new u(i)}static isValid(t){return null!=t&&("number"==typeof t||("string"==typeof t?12===t.length||24===t.length&&s.test(t):t instanceof u||(t instanceof g&&12===t.length||!!t.toHexString&&(12===t.id.length||24===t.id.length&&s.test(t.id)))))}toExtendedJSON(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}static fromExtendedJSON(t){return new u(t.$oid)}}u.get_inc=r(()=>u.getInc(),"Please use the static `ObjectId.getInc()` instead"),u.prototype.get_inc=r(()=>u.getInc(),"Please use the static `ObjectId.getInc()` instead"),u.prototype.getInc=r(()=>u.getInc(),"Please use the static `ObjectId.getInc()` instead"),u.prototype.generate=r(t=>u.generate(t),"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(u.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(t){this.id[3]=255&t,this.id[2]=t>>8&255,this.id[1]=t>>16&255,this.id[0]=t>>24&255}}),u.prototype[i.inspect.custom||"inspect"]=u.prototype.toString,u.index=~~(16777215*Math.random()),Object.defineProperty(u.prototype,"_bsontype",{value:"ObjectID"}),module.exports=u;