"use strict";const e=require("buffer").Buffer,t=require("../float_parser").writeIEEE754,i=require("../long"),n=require("../map"),o=require("../binary"),r=require("../constants"),s=require("./utils").normalizedFunctionString,f=/\x00/,l=new Set(["$db","$ref","$id","$clusterTime"]),c=function(e){return"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)},u=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)};function _(e,t,i,n,o){e[n++]=r.BSON_DATA_STRING,e[(n=n+(o?e.write(t,n,"ascii"):e.write(t,n,"utf8"))+1)-1]=0;const s=e.write(i,n+4,"utf8");return e[n+3]=s+1>>24&255,e[n+2]=s+1>>16&255,e[n+1]=s+1>>8&255,e[n]=s+1&255,n=n+4+s,e[n++]=0,n}function p(e,n,o,s,f){if(Math.floor(o)===o&&o>=r.JS_INT_MIN&&o<=r.JS_INT_MAX)if(o>=r.BSON_INT32_MIN&&o<=r.BSON_INT32_MAX){e[s++]=r.BSON_DATA_INT,s+=f?e.write(n,s,"ascii"):e.write(n,s,"utf8"),e[s++]=0,e[s++]=255&o,e[s++]=o>>8&255,e[s++]=o>>16&255,e[s++]=o>>24&255}else if(o>=r.JS_INT_MIN&&o<=r.JS_INT_MAX){e[s++]=r.BSON_DATA_NUMBER,s+=f?e.write(n,s,"ascii"):e.write(n,s,"utf8"),e[s++]=0,t(e,o,s,"little",52,8),s+=8}else{e[s++]=r.BSON_DATA_LONG,s+=f?e.write(n,s,"ascii"):e.write(n,s,"utf8"),e[s++]=0;const t=i.fromNumber(o),l=t.getLowBits(),c=t.getHighBits();e[s++]=255&l,e[s++]=l>>8&255,e[s++]=l>>16&255,e[s++]=l>>24&255,e[s++]=255&c,e[s++]=c>>8&255,e[s++]=c>>16&255,e[s++]=c>>24&255}else{e[s++]=r.BSON_DATA_NUMBER,s+=f?e.write(n,s,"ascii"):e.write(n,s,"utf8"),e[s++]=0,t(e,o,s,"little",52,8),s+=8}return s}function y(e,t,i,n,o){return e[n++]=r.BSON_DATA_NULL,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,n}function b(e,t,i,n,o){return e[n++]=r.BSON_DATA_BOOLEAN,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,e[n++]=i?1:0,n}function a(e,t,n,o,s){e[o++]=r.BSON_DATA_DATE,o+=s?e.write(t,o,"ascii"):e.write(t,o,"utf8"),e[o++]=0;const f=i.fromNumber(n.getTime()),l=f.getLowBits(),c=f.getHighBits();return e[o++]=255&l,e[o++]=l>>8&255,e[o++]=l>>16&255,e[o++]=l>>24&255,e[o++]=255&c,e[o++]=c>>8&255,e[o++]=c>>16&255,e[o++]=c>>24&255,o}function w(e,t,i,n,o){if(e[n++]=r.BSON_DATA_REGEXP,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,i.source&&null!=i.source.match(f))throw Error("value "+i.source+" must not contain null bytes");return n+=e.write(i.source,n,"utf8"),e[n++]=0,i.ignoreCase&&(e[n++]=105),i.global&&(e[n++]=115),i.multiline&&(e[n++]=109),e[n++]=0,n}function A(e,t,i,n,o){if(e[n++]=r.BSON_DATA_REGEXP,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,null!=i.pattern.match(f))throw Error("pattern "+i.pattern+" must not contain null bytes");return n+=e.write(i.pattern,n,"utf8"),e[n++]=0,n+=e.write(i.options.split("").sort().join(""),n,"utf8"),e[n++]=0,n}function B(e,t,i,n,o){return null===i?e[n++]=r.BSON_DATA_NULL:"MinKey"===i._bsontype?e[n++]=r.BSON_DATA_MIN_KEY:e[n++]=r.BSON_DATA_MAX_KEY,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,n}function N(e,t,i,n,o){if(e[n++]=r.BSON_DATA_OID,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,"string"==typeof i.id)e.write(i.id,n,"binary");else{if(!i.id||!i.id.copy)throw new TypeError("object ["+JSON.stringify(i)+"] is not a valid ObjectId");i.id.copy(e,n,0,12)}return n+12}function O(e,t,i,n,o){e[n++]=r.BSON_DATA_BINARY,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;const s=i.length;return e[n++]=255&s,e[n++]=s>>8&255,e[n++]=s>>16&255,e[n++]=s>>24&255,e[n++]=r.BSON_BINARY_SUBTYPE_DEFAULT,i.copy(e,n,0,s),n+=s}function S(e,t,i,n,o,s,f,l,c,u){for(let e=0;e<u.length;e++)if(u[e]===i)throw new Error("cyclic dependency detected");u.push(i),e[n++]=Array.isArray(i)?r.BSON_DATA_ARRAY:r.BSON_DATA_OBJECT,n+=c?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;const _=j(e,i,o,n,s+1,f,l,u);return u.pop(),_}function T(e,t,i,n,o){return e[n++]=r.BSON_DATA_DECIMAL128,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,i.bytes.copy(e,n,0,16),n+16}function E(e,t,i,n,o){e[n++]="Long"===i._bsontype?r.BSON_DATA_LONG:r.BSON_DATA_TIMESTAMP,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;const s=i.getLowBits(),f=i.getHighBits();return e[n++]=255&s,e[n++]=s>>8&255,e[n++]=s>>16&255,e[n++]=s>>24&255,e[n++]=255&f,e[n++]=f>>8&255,e[n++]=f>>16&255,e[n++]=f>>24&255,n}function D(e,t,i,n,o){return e[n++]=r.BSON_DATA_INT,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0,e[n++]=255&i,e[n++]=i>>8&255,e[n++]=i>>16&255,e[n++]=i>>24&255,n}function d(e,i,n,o,s){return e[o++]=r.BSON_DATA_NUMBER,o+=s?e.write(i,o,"ascii"):e.write(i,o,"utf8"),e[o++]=0,t(e,n.value,o,"little",52,8),o+=8}function g(e,t,i,n,o,f,l){e[n++]=r.BSON_DATA_CODE,n+=l?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;const c=s(i),u=e.write(c,n+4,"utf8")+1;return e[n]=255&u,e[n+1]=u>>8&255,e[n+2]=u>>16&255,e[n+3]=u>>24&255,n=n+4+u-1,e[n++]=0,n}function m(e,t,i,n,o,s,f,l,c){if(i.scope&&"object"==typeof i.scope){e[n++]=r.BSON_DATA_CODE_W_SCOPE,n+=c?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;let u=n;const _="string"==typeof i.code?i.code:i.code.toString();n+=4;const p=e.write(_,n+4,"utf8")+1;e[n]=255&p,e[n+1]=p>>8&255,e[n+2]=p>>16&255,e[n+3]=p>>24&255,e[n+4+p-1]=0,n=n+p+4;const y=j(e,i.scope,o,n,s+1,f,l);n=y-1;const b=y-u;e[u++]=255&b,e[u++]=b>>8&255,e[u++]=b>>16&255,e[u++]=b>>24&255,e[n++]=0}else{e[n++]=r.BSON_DATA_CODE,n+=c?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;const o=i.code.toString(),s=e.write(o,n+4,"utf8")+1;e[n]=255&s,e[n+1]=s>>8&255,e[n+2]=s>>16&255,e[n+3]=s>>24&255,n=n+4+s-1,e[n++]=0}return n}function h(e,t,i,n,s){e[n++]=r.BSON_DATA_BINARY,n+=s?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;const f=i.value(!0);let l=i.position;return i.sub_type===o.SUBTYPE_BYTE_ARRAY&&(l+=4),e[n++]=255&l,e[n++]=l>>8&255,e[n++]=l>>16&255,e[n++]=l>>24&255,e[n++]=i.sub_type,i.sub_type===o.SUBTYPE_BYTE_ARRAY&&(l-=4,e[n++]=255&l,e[n++]=l>>8&255,e[n++]=l>>16&255,e[n++]=l>>24&255),f.copy(e,n,0,i.position),n+=i.position}function I(e,t,i,n,o){e[n++]=r.BSON_DATA_SYMBOL,n+=o?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;const s=e.write(i.value,n+4,"utf8")+1;return e[n]=255&s,e[n+1]=s>>8&255,e[n+2]=s>>16&255,e[n+3]=s>>24&255,n=n+4+s-1,e[n++]=0,n}function R(e,t,i,n,o,s,f){e[n++]=r.BSON_DATA_OBJECT,n+=f?e.write(t,n,"ascii"):e.write(t,n,"utf8"),e[n++]=0;let l,c=n,u={$ref:i.collection||i.namespace,$id:i.oid};null!=i.db&&(u.$db=i.db);const _=(l=j(e,u=Object.assign(u,i.fields),!1,n,o+1,s))-c;return e[c++]=255&_,e[c++]=_>>8&255,e[c++]=_>>16&255,e[c++]=_>>24&255,l}function j(t,i,o,r,s,j,M,L){r=r||0,(L=L||[]).push(i);let v=r+4;if(Array.isArray(i))for(let n=0;n<i.length;n++){let r=""+n,f=i[n];if(f&&f.toBSON){if("function"!=typeof f.toBSON)throw new TypeError("toBSON is not a function");f=f.toBSON()}const l=typeof f;if("string"===l)v=_(t,r,f,v,!0);else if("number"===l)v=p(t,r,f,v,!0);else if("boolean"===l)v=b(t,r,f,v,!0);else if(f instanceof Date||c(f))v=a(t,r,f,v,!0);else if(void 0===f)v=y(t,r,0,v,!0);else if(null===f)v=y(t,r,0,v,!0);else if("ObjectId"===f._bsontype||"ObjectID"===f._bsontype)v=N(t,r,f,v,!0);else if(e.isBuffer(f))v=O(t,r,f,v,!0);else if(f instanceof RegExp||u(f))v=w(t,r,f,v,!0);else if("object"===l&&null==f._bsontype)v=S(t,r,f,v,o,s,j,M,!0,L);else if("object"===l&&"Decimal128"===f._bsontype)v=T(t,r,f,v,!0);else if("Long"===f._bsontype||"Timestamp"===f._bsontype)v=E(t,r,f,v,!0);else if("Double"===f._bsontype)v=d(t,r,f,v,!0);else if("function"==typeof f&&j)v=g(t,r,f,v,0,0,j);else if("Code"===f._bsontype)v=m(t,r,f,v,o,s,j,M,!0);else if("Binary"===f._bsontype)v=h(t,r,f,v,!0);else if("Symbol"===f._bsontype)v=I(t,r,f,v,!0);else if("DBRef"===f._bsontype)v=R(t,r,f,v,s,j,!0);else if("BSONRegExp"===f._bsontype)v=A(t,r,f,v,!0);else if("Int32"===f._bsontype)v=D(t,r,f,v,!0);else if("MinKey"===f._bsontype||"MaxKey"===f._bsontype)v=B(t,r,f,v,!0);else if(void 0!==f._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+f._bsontype)}else if(i instanceof n){const n=i.entries();let r=!1;for(;!r;){const i=n.next();if(r=i.done)continue;const x=i.value[0],Y=i.value[1],U=typeof Y;if("string"==typeof x&&!l.has(x)){if(null!=x.match(f))throw Error("key "+x+" must not contain null bytes");if(o){if("$"===x[0])throw Error("key "+x+" must not start with '$'");if(~x.indexOf("."))throw Error("key "+x+" must not contain '.'")}}if("string"===U)v=_(t,x,Y,v);else if("number"===U)v=p(t,x,Y,v);else if("boolean"===U)v=b(t,x,Y,v);else if(Y instanceof Date||c(Y))v=a(t,x,Y,v);else if(null===Y||void 0===Y&&!1===M)v=y(t,x,0,v);else if("ObjectId"===Y._bsontype||"ObjectID"===Y._bsontype)v=N(t,x,Y,v);else if(e.isBuffer(Y))v=O(t,x,Y,v);else if(Y instanceof RegExp||u(Y))v=w(t,x,Y,v);else if("object"===U&&null==Y._bsontype)v=S(t,x,Y,v,o,s,j,M,!1,L);else if("object"===U&&"Decimal128"===Y._bsontype)v=T(t,x,Y,v);else if("Long"===Y._bsontype||"Timestamp"===Y._bsontype)v=E(t,x,Y,v);else if("Double"===Y._bsontype)v=d(t,x,Y,v);else if("Code"===Y._bsontype)v=m(t,x,Y,v,o,s,j,M);else if("function"==typeof Y&&j)v=g(t,x,Y,v,0,0,j);else if("Binary"===Y._bsontype)v=h(t,x,Y,v);else if("Symbol"===Y._bsontype)v=I(t,x,Y,v);else if("DBRef"===Y._bsontype)v=R(t,x,Y,v,s,j);else if("BSONRegExp"===Y._bsontype)v=A(t,x,Y,v);else if("Int32"===Y._bsontype)v=D(t,x,Y,v);else if("MinKey"===Y._bsontype||"MaxKey"===Y._bsontype)v=B(t,x,Y,v);else if(void 0!==Y._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+Y._bsontype)}}else{if(i.toBSON){if("function"!=typeof i.toBSON)throw new TypeError("toBSON is not a function");if(null!=(i=i.toBSON())&&"object"!=typeof i)throw new TypeError("toBSON function did not return an object")}for(let n in i){let r=i[n];if(r&&r.toBSON){if("function"!=typeof r.toBSON)throw new TypeError("toBSON is not a function");r=r.toBSON()}const x=typeof r;if("string"==typeof n&&!l.has(n)){if(null!=n.match(f))throw Error("key "+n+" must not contain null bytes");if(o){if("$"===n[0])throw Error("key "+n+" must not start with '$'");if(~n.indexOf("."))throw Error("key "+n+" must not contain '.'")}}if("string"===x)v=_(t,n,r,v);else if("number"===x)v=p(t,n,r,v);else if("boolean"===x)v=b(t,n,r,v);else if(r instanceof Date||c(r))v=a(t,n,r,v);else if(void 0===r)!1===M&&(v=y(t,n,0,v));else if(null===r)v=y(t,n,0,v);else if("ObjectId"===r._bsontype||"ObjectID"===r._bsontype)v=N(t,n,r,v);else if(e.isBuffer(r))v=O(t,n,r,v);else if(r instanceof RegExp||u(r))v=w(t,n,r,v);else if("object"===x&&null==r._bsontype)v=S(t,n,r,v,o,s,j,M,!1,L);else if("object"===x&&"Decimal128"===r._bsontype)v=T(t,n,r,v);else if("Long"===r._bsontype||"Timestamp"===r._bsontype)v=E(t,n,r,v);else if("Double"===r._bsontype)v=d(t,n,r,v);else if("Code"===r._bsontype)v=m(t,n,r,v,o,s,j,M);else if("function"==typeof r&&j)v=g(t,n,r,v,0,0,j);else if("Binary"===r._bsontype)v=h(t,n,r,v);else if("Symbol"===r._bsontype)v=I(t,n,r,v);else if("DBRef"===r._bsontype)v=R(t,n,r,v,s,j);else if("BSONRegExp"===r._bsontype)v=A(t,n,r,v);else if("Int32"===r._bsontype)v=D(t,n,r,v);else if("MinKey"===r._bsontype||"MaxKey"===r._bsontype)v=B(t,n,r,v);else if(void 0!==r._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+r._bsontype)}}L.pop(),t[v++]=0;const x=v-r;return t[r++]=255&x,t[r++]=x>>8&255,t[r++]=x>>16&255,t[r++]=x>>24&255,v}module.exports=j;