"use strict";const e=require("fs"),r=require("array-union"),t=require("merge2"),o=require("glob"),n=require("fast-glob"),i=require("dir-glob"),s=require("./gitignore"),{FilterStream:a,UniqueStream:c}=require("./stream-utils"),p=()=>!1,u=e=>"!"===e[0],g=(t,o)=>{(e=>{if(!e.every(e=>"string"==typeof e))throw new TypeError("Patterns must be a string or an array of strings")})(t=r([].concat(t))),((r={})=>{if(!r.cwd)return;let t;try{t=e.statSync(r.cwd)}catch(e){return}if(!t.isDirectory())throw new Error("The `cwd` option must be a path to a directory")})(o);const n=[];o={ignore:[],expandDirectories:!0,...o};for(const[e,r]of t.entries()){if(u(r))continue;const i=t.slice(e).filter(u).map(e=>e.slice(1)),s={...o,ignore:o.ignore.concat(i)};n.push({pattern:r,options:s})}return n},d=(e,r)=>e.options.expandDirectories?((e,r)=>{let t={};return e.options.cwd&&(t.cwd=e.options.cwd),Array.isArray(e.options.expandDirectories)?t={...t,files:e.options.expandDirectories}:"object"==typeof e.options.expandDirectories&&(t={...t,...e.options.expandDirectories}),r(e.pattern,t)})(e,r):[e.pattern],l=e=>e&&e.gitignore?s.sync({cwd:e.cwd,ignore:e.ignore}):p,m=e=>r=>{const{options:t}=e;return t.ignore&&Array.isArray(t.ignore)&&t.expandDirectories&&(t.ignore=i.sync(t.ignore)),{pattern:r,options:t}};module.exports=(async(t,o)=>{const a=g(t,o),[c,u]=await Promise.all([(async()=>o&&o.gitignore?s({cwd:o.cwd,ignore:o.ignore}):p)(),(async()=>{const e=await Promise.all(a.map(async e=>{const r=await d(e,i);return Promise.all(r.map(m(e)))}));return r(...e)})()]),l=await Promise.all(u.map(e=>n(e.pattern,e.options)));return r(...l).filter(r=>!c((r=>r.stats instanceof e.Stats?r.path:r)(r)))}),module.exports.sync=((e,t)=>{const o=g(e,t).reduce((e,r)=>{const t=d(r,i.sync).map(m(r));return e.concat(t)},[]),s=l(t);return o.reduce((e,t)=>r(e,n.sync(t.pattern,t.options)),[]).filter(e=>!s(e))}),module.exports.stream=((e,r)=>{const o=g(e,r).reduce((e,r)=>{const t=d(r,i.sync).map(m(r));return e.concat(t)},[]),s=l(r),p=new a(e=>!s(e)),u=new c;return t(o.map(e=>n.stream(e.pattern,e.options))).pipe(p).pipe(u)}),module.exports.generateGlobTasks=g,module.exports.hasMagic=((e,r)=>[].concat(e).some(e=>o.hasMagic(e,r))),module.exports.gitignore=s;