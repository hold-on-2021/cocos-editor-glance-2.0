"use strict";const{promisify:e}=require("util"),r=require("fs"),t=require("path"),i=require("fast-glob"),n=require("ignore"),o=require("slash"),c=["**/node_modules/**","**/flow-typed/**","**/coverage/**","**/.git"],s=e(r.readFile),a=(e,r)=>{const i=o(t.relative(r.cwd,t.dirname(r.fileName)));return e.split(/\r?\n/).filter(Boolean).filter(e=>!e.startsWith("#")).map((e=>r=>r.startsWith("!")?"!"+t.posix.join(e,r.slice(1)):t.posix.join(e,r))(i))},d=e=>e.reduce((e,r)=>(e.add(a(r.content,{cwd:r.cwd,fileName:r.filePath})),e),n()),l=(e,r)=>i=>e.ignores(o(t.relative(r,((e,r)=>{if(t.isAbsolute(r)){if(r.startsWith(e))return r;throw new Error(`Path ${r} is not in cwd ${e}`)}return t.join(e,r)})(r,i)))),w=({ignore:e=[],cwd:r=o(process.cwd())}={})=>({ignore:e,cwd:r});module.exports=(async e=>{e=w(e);const r=await i("**/.gitignore",{ignore:c.concat(e.ignore),cwd:e.cwd}),n=await Promise.all(r.map(r=>(async(e,r)=>{const i=t.join(r,e);return{cwd:r,filePath:i,content:await s(i,"utf8")}})(r,e.cwd))),o=d(n);return l(o,e.cwd)}),module.exports.sync=(e=>{e=w(e);const n=i.sync("**/.gitignore",{ignore:c.concat(e.ignore),cwd:e.cwd}).map(i=>((e,i)=>{const n=t.join(i,e);return{cwd:i,filePath:n,content:r.readFileSync(n,"utf8")}})(i,e.cwd)),o=d(n);return l(o,e.cwd)});