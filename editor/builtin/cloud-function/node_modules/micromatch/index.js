"use strict";const e=require("util"),t=require("braces"),r=require("picomatch"),n=require("picomatch/lib/utils"),o=e=>"string"==typeof e&&(""===e||"./"===e),i=(e,t,n)=>{t=[].concat(t),e=[].concat(e);let o=new Set,i=new Set,a=new Set,s=0,c=e=>{a.add(e.output),n&&n.onResult&&n.onResult(e)};for(let a=0;a<t.length;a++){let u=r(String(t[a]),{...n,onResult:c},!0),l=u.state.negated||u.state.negatedExtglob;l&&s++;for(let t of e){let e=u(t,!0);(l?!e.isMatch:e.isMatch)&&(l?o.add(e.output):(o.delete(e.output),i.add(e.output)))}}let u=(s===t.length?[...a]:[...i]).filter(e=>!o.has(e));if(n&&0===u.length){if(!0===n.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===n.nonull||!0===n.nullglob)return n.unescape?t.map(e=>e.replace(/\\/g,"")):t}return u};i.match=i,i.matcher=((e,t)=>r(e,t)),i.any=i.isMatch=((e,t,n)=>r(t,n)(e)),i.not=((e,t,r={})=>{t=[].concat(t).map(String);let n=new Set,o=[],a=i(e,t,{...r,onResult:e=>{r.onResult&&r.onResult(e),o.push(e.output)}});for(let e of o)a.includes(e)||n.add(e);return[...n]}),i.contains=((t,r,n)=>{if("string"!=typeof t)throw new TypeError(`Expected a string: "${e.inspect(t)}"`);if(Array.isArray(r))return r.some(e=>i.contains(t,e,n));if("string"==typeof r){if(o(t)||o(r))return!1;if(t.includes(r)||t.startsWith("./")&&t.slice(2).includes(r))return!0}return i.isMatch(t,r,{...n,contains:!0})}),i.matchKeys=((e,t,r)=>{if(!n.isObject(e))throw new TypeError("Expected the first argument to be an object");let o=i(Object.keys(e),t,r),a={};for(let t of o)a[t]=e[t];return a}),i.some=((e,t,n)=>{let o=[].concat(e);for(let e of[].concat(t)){let t=r(String(e),n);if(o.some(e=>t(e)))return!0}return!1}),i.every=((e,t,n)=>{let o=[].concat(e);for(let e of[].concat(t)){let t=r(String(e),n);if(!o.every(e=>t(e)))return!1}return!0}),i.all=((t,n,o)=>{if("string"!=typeof t)throw new TypeError(`Expected a string: "${e.inspect(t)}"`);return[].concat(n).every(e=>r(e,o)(t))}),i.capture=((e,t,o)=>{let i=n.isWindows(o),a=r.makeRe(String(e),{...o,capture:!0}).exec(i?n.toPosixSlashes(t):t);if(a)return a.slice(1).map(e=>void 0===e?"":e)}),i.makeRe=((...e)=>r.makeRe(...e)),i.scan=((...e)=>r.scan(...e)),i.parse=((e,n)=>{let o=[];for(let i of[].concat(e||[]))for(let e of t(String(i),n))o.push(r.parse(e,n));return o}),i.braces=((e,r)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return r&&!0===r.nobrace||!/\{.*\}/.test(e)?[e]:t(e,r)}),i.braceExpand=((e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return i.braces(e,{...t,expand:!0})}),module.exports=i;