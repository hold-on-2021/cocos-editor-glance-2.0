"use strict";const r=require("fs"),e=require("../utils"),t=require("get-ready"),i=require("streamifier"),s=require("flushwritable"),o=require("../gzip").UncompressStream,n=require("../tar").UncompressStream;class u extends s{constructor(t){super(t=t||{});const s=e.clone(t);s.source=void 0,this._gzipStream=new o(s).on("error",r=>this.emit("error",r));const u=new n(s).on("finish",()=>this.ready(!0)).on("entry",this.emit.bind(this,"entry")).on("error",r=>this.emit("error",r));this._gzipStream.pipe(u);const c=e.sourceType(t.source);if("file"===c){const e=r.createReadStream(t.source,t.fs);return e.on("error",r=>this.emit("error",r)),e.pipe(this),void 0}if("buffer"===c){const r=i.createReadStream(t.source,t.streamifier);return r.on("error",r=>this.emit("error",r)),r.pipe(this),void 0}"stream"===c&&(t.source.on("error",r=>this.emit("error",r)),t.source.pipe(this))}_write(r,e,t){this._gzipStream.write(r,e,t)}_flush(r){this._gzipStream.end(),this.ready(r)}}t.mixin(u.prototype),module.exports=u;