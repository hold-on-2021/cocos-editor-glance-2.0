"use strict";const r=require("fs"),e=require("path"),{promisify:t}=require("util"),o=require("semver").satisfies(process.version,">=10.12.0"),s=r=>{if("win32"===process.platform){if(/[<>:"|?*]/.test(r.replace(e.parse(r).root,""))){const e=new Error(`Path contains invalid characters: ${r}`);throw e.code="EINVAL",e}}},i=e=>{return{...{mode:511&~process.umask(),fs:r},...e}},n=r=>{const e=new Error(`operation not permitted, mkdir '${r}'`);return e.code="EPERM",e.errno=-4048,e.path=r,e.syscall="mkdir",e};module.exports=(async(c,a)=>{s(c),a=i(a);const d=t(a.fs.mkdir),m=t(a.fs.stat);if(o&&a.fs.mkdir===r.mkdir){const r=e.resolve(c);return await d(r,{mode:a.mode,recursive:!0}),r}const u=async r=>{try{return await d(r,a.mode),r}catch(t){if("EPERM"===t.code)throw t;if("ENOENT"===t.code){if(e.dirname(r)===r)throw n(r);if(t.message.includes("null bytes"))throw t;return await u(e.dirname(r)),u(r)}try{if(!(await m(r)).isDirectory())throw new Error("The path is not a directory")}catch(r){throw t}return r}};return u(e.resolve(c))}),module.exports.sync=((t,c)=>{if(s(t),c=i(c),o&&c.fs.mkdirSync===r.mkdirSync){const o=e.resolve(t);return r.mkdirSync(o,{mode:c.mode,recursive:!0}),o}const a=r=>{try{c.fs.mkdirSync(r,c.mode)}catch(t){if("EPERM"===t.code)throw t;if("ENOENT"===t.code){if(e.dirname(r)===r)throw n(r);if(t.message.includes("null bytes"))throw t;return a(e.dirname(r)),a(r)}try{if(!c.fs.statSync(r).isDirectory())throw new Error("The path is not a directory")}catch(r){throw t}}return r};return a(e.resolve(t))});