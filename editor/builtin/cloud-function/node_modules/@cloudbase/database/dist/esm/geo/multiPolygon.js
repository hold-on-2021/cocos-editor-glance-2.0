import{SYMBOL_GEO_POLYGON as o}from"../helper/symbol";import{isArray as t,isNumber as e}from"../utils/type";import{Polygon as r}from"./polygon";export class MultiPolygon{constructor(o){if(!t(o))throw new TypeError(`"polygons" must be of type Polygon[]. Received type ${typeof o}`);if(0===o.length)throw new Error("MultiPolygon must contain 1 polygon at least");for(let t of o)if(!(t instanceof r))throw new TypeError(`"polygon" must be of type Polygon[]. Received type ${typeof t}[]`);this.polygons=o}parse(o){return{[o]:{type:"MultiPolygon",coordinates:this.polygons.map(o=>o.lines.map(o=>o.points.map(o=>[o.longitude,o.latitude])))}}}toJSON(){return{type:"MultiPolygon",coordinates:this.polygons.map(o=>o.lines.map(o=>o.points.map(o=>[o.longitude,o.latitude])))}}static validate(o){if("MultiPolygon"!==o.type||!t(o.coordinates))return!1;for(let t of o.coordinates)for(let o of t)for(let t of o)if(!e(t[0])||!e(t[1]))return!1;return!0}get _internalType(){return o}};