import{createPromiseCallback as e}from"./lib/util";import{Db as t}from"./index";import{Util as i}from"./util";import{UpdateSerializer as s}from"./serializer/update";import{serialize as o}from"./serializer/datatype";import{UpdateCommand as r}from"./commands/update";import{RealtimeWebSocketClient as d}from"./realtime/websocket-client";export class DocumentReference{constructor(e,i,s,o={}){this.watch=(e=>(t.ws||(t.ws=new d({context:{appConfig:{docSizeLimit:1e3,realtimePingInterval:1e4,realtimePongWaitTimeout:5e3,getAccessToken:this._getAccessToken}}})),t.ws.watch(Object.assign(Object.assign({},e),{envId:this._db.config.env,collectionName:this._coll,query:JSON.stringify({_id:this.id})})))),this._db=e,this._coll=i,this.id=s,this.request=new t.reqClass(this._db.config),this.projection=o,this._getAccessToken=t.getAccessToken}create(t,i){i=i||e();let s={collectionName:this._coll,data:o(t)};return this.id&&(s._id=this.id),this.request.send("database.addDocument",s).then(e=>{e.code?i(0,e):i(0,{id:e.data._id,requestId:e.requestId})}).catch(e=>{i(e)}),i.promise}set(t,i){if(i=i||e(),!this.id)return Promise.resolve({code:"INVALID_PARAM",message:"docId不能为空"});if(!t||"object"!=typeof t)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(t.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});let s=!1;const d=e=>{if("object"==typeof e)for(let t in e)e[t]instanceof r?s=!0:"object"==typeof e[t]&&d(e[t])};if(d(t),s)return Promise.resolve({code:"DATABASE_REQUEST_FAILED",message:"update operator complicit"});let a={collectionName:this._coll,data:o(t),multi:!1,merge:!1,upsert:!0};return this.id&&(a.query={_id:this.id}),this.request.send("database.updateDocument",a).then(e=>{e.code?i(0,e):i(0,{updated:e.data.updated,upsertedId:e.data.upserted_id,requestId:e.requestId})}).catch(e=>{i(e)}),i.promise}update(t,i){if(i=i||e(),!t||"object"!=typeof t)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(t.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});const o={_id:this.id},r={collectionName:this._coll,data:s.encode(t),query:o,multi:!1,merge:!0,upsert:!1};return this.request.send("database.updateDocument",r).then(e=>{e.code?i(0,e):i(0,{updated:e.data.updated,upsertedId:e.data.upserted_id,requestId:e.requestId})}).catch(e=>{i(e)}),i.promise}remove(t){t=t||e();const i={_id:this.id},s={collectionName:this._coll,query:i,multi:!1};return this.request.send("database.deleteDocument",s).then(e=>{e.code?t(0,e):t(0,{deleted:e.data.deleted,requestId:e.requestId})}).catch(e=>{t(e)}),t.promise}get(t){t=t||e();const s={_id:this.id},o={collectionName:this._coll,query:s,multi:!1,projection:this.projection};return this.request.send("database.queryDocument",o).then(e=>{if(e.code)t(0,e);else{const s=i.formatResDocumentData(e.data.list);t(0,{data:s,requestId:e.requestId,total:e.TotalCount,limit:e.Limit,offset:e.Offset})}}).catch(e=>{t(e)}),t.promise}field(e){for(let t in e)e[t]?e[t]=1:e[t]=0;return new DocumentReference(this._db,this._coll,this.id,e)}};