import{EJSON as t}from"bson";import{Db as a}from"./index";class s{constructor(t,a){this._data=t,this.requestId=a}data(){return this._data}}const e="database.startTransaction",n="database.commitTransaction",i="database.abortTransaction",r="database.getInTransaction",o="database.updateDocInTransaction",c="database.deleteDocInTransaction";export class Transaction{constructor(t){this._db=t,this._request=new a.reqClass(this._db.config)}async init(){const t=await this._request.send(e);if(t.code)throw t;this._id=t.transactionId}async get(a){const e={collectionName:a._coll,transactionId:this._id,_id:a.id},n=await this._request.send(r,e);if(n.code)throw n;return new s(t.parse(n.data),n.requestId)}async set(a,s){const e={collectionName:a._coll,transactionId:this._id,_id:a.id,data:t.stringify(s,{relaxed:!1}),upsert:!0},n=await this._request.send(o,e);if(n.code)throw n;return Object.assign(Object.assign({},n),{updated:t.parse(n.updated),upserted:n.upserted?JSON.parse(n.upserted):null})}async update(a,s){const e={collectionName:a._coll,transactionId:this._id,_id:a.id,data:t.stringify({$set:s},{relaxed:!1})},n=await this._request.send(o,e);if(n.code)throw n;return Object.assign(Object.assign({},n),{updated:t.parse(n.updated)})}async delete(a){const s={collectionName:a._coll,transactionId:this._id,_id:a.id},e=await this._request.send(c,s);if(e.code)throw e;return Object.assign(Object.assign({},e),{deleted:t.parse(e.deleted)})}async commit(){const t={transactionId:this._id},a=await this._request.send(n,t);if(a.code)throw a;return a}async rollback(){const t={transactionId:this._id},a=await this._request.send(i,t);if(a.code)throw a;return a}};export async function startTransaction(){const t=new Transaction(this);return await t.init(),t};export async function runTransaction(t,a=3){if(a<=0)throw new Error("Transaction failed");try{const s=new Transaction(this);await s.init(),await t(s),await s.commit()}catch(s){return console.log(s),runTransaction.bind(this)(t,--a)}};