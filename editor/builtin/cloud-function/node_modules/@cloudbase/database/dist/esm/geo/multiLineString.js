import{SYMBOL_GEO_MULTI_LINE_STRING as t}from"../helper/symbol";import{isArray as e,isNumber as i}from"../utils/type";import{LineString as r}from"./lineString";export class MultiLineString{constructor(t){if(!e(t))throw new TypeError(`"lines" must be of type LineString[]. Received type ${typeof t}`);if(0===t.length)throw new Error("Polygon must contain 1 linestring at least");t.forEach(t=>{if(!(t instanceof r))throw new TypeError(`"lines" must be of type LineString[]. Received type ${typeof t}[]`)}),this.lines=t}parse(t){return{[t]:{type:"MultiLineString",coordinates:this.lines.map(t=>t.points.map(t=>[t.longitude,t.latitude]))}}}toJSON(){return{type:"MultiLineString",coordinates:this.lines.map(t=>t.points.map(t=>[t.longitude,t.latitude]))}}static validate(t){if("MultiLineString"!==t.type||!e(t.coordinates))return!1;for(let e of t.coordinates)for(let t of e)if(!i(t[0])||!i(t[1]))return!1;return!0}get _internalType(){return t}};