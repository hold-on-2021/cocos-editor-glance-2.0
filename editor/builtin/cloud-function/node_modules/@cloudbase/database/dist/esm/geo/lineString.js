import{SYMBOL_GEO_LINE_STRING as t}from"../helper/symbol";import{Point as e}from"./point";import{isArray as o,isNumber as i}from"../utils/type";export class LineString{constructor(t){if(!o(t))throw new TypeError(`"points" must be of type Point[]. Received type ${typeof t}`);if(t.length<2)throw new Error('"points" must contain 2 points at least');t.forEach(t=>{if(!(t instanceof e))throw new TypeError(`"points" must be of type Point[]. Received type ${typeof t}[]`)}),this.points=t}parse(t){return{[t]:{type:"LineString",coordinates:this.points.map(t=>t.toJSON().coordinates)}}}toJSON(){return{type:"LineString",coordinates:this.points.map(t=>t.toJSON().coordinates)}}static validate(t){if("LineString"!==t.type||!o(t.coordinates))return!1;for(let e of t.coordinates)if(!i(e[0])||!i(e[1]))return!1;return!0}static isClosed(t){const e=t.points[0],o=t.points[t.points.length-1];if(e.latitude===o.latitude&&e.longitude===o.longitude)return!0}get _internalType(){return t}};