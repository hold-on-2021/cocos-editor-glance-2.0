"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("./logic"),t=require("../helper/symbol"),n=require("../geo/index"),o=require("../utils/type");var i;exports.EQ="eq",exports.NEQ="neq",exports.GT="gt",exports.GTE="gte",exports.LT="lt",exports.LTE="lte",exports.IN="in",exports.NIN="nin",function(e){e.EQ="eq",e.NEQ="neq",e.GT="gt",e.GTE="gte",e.LT="lt",e.LTE="lte",e.IN="in",e.NIN="nin",e.GEO_NEAR="geoNear",e.GEO_WITHIN="geoWithin",e.GEO_INTERSECTS="geoIntersects"}(i=exports.QUERY_COMMANDS_LITERAL||(exports.QUERY_COMMANDS_LITERAL={}));class r extends e.LogicCommand{constructor(e,n,o){super(e,n,o),this.operator=e,this._internalType=t.SYMBOL_QUERY_COMMAND}_setFieldName(e){return new r(this.operator,this.operands,e)}eq(e){const t=new r(i.EQ,[e],this.fieldName);return this.and(t)}neq(e){const t=new r(i.NEQ,[e],this.fieldName);return this.and(t)}gt(e){const t=new r(i.GT,[e],this.fieldName);return this.and(t)}gte(e){const t=new r(i.GTE,[e],this.fieldName);return this.and(t)}lt(e){const t=new r(i.LT,[e],this.fieldName);return this.and(t)}lte(e){const t=new r(i.LTE,[e],this.fieldName);return this.and(t)}in(e){const t=new r(i.IN,e,this.fieldName);return this.and(t)}nin(e){const t=new r(i.NIN,e,this.fieldName);return this.and(t)}geoNear(e){if(!(e.geometry instanceof n.Point))throw new TypeError(`"geometry" must be of type Point. Received type ${typeof e.geometry}`);if(void 0!==e.maxDistance&&!o.isNumber(e.maxDistance))throw new TypeError(`"maxDistance" must be of type Number. Received type ${typeof e.maxDistance}`);if(void 0!==e.minDistance&&!o.isNumber(e.minDistance))throw new TypeError(`"minDistance" must be of type Number. Received type ${typeof e.minDistance}`);const t=new r(i.GEO_NEAR,[e],this.fieldName);return this.and(t)}geoWithin(e){if(!(e.geometry instanceof n.MultiPolygon||e.geometry instanceof n.Polygon))throw new TypeError(`"geometry" must be of type Polygon or MultiPolygon. Received type ${typeof e.geometry}`);const t=new r(i.GEO_WITHIN,[e],this.fieldName);return this.and(t)}geoIntersects(e){if(!(e.geometry instanceof n.Point||e.geometry instanceof n.LineString||e.geometry instanceof n.Polygon||e.geometry instanceof n.MultiPoint||e.geometry instanceof n.MultiLineString||e.geometry instanceof n.MultiPolygon))throw new TypeError(`"geometry" must be of type Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon. Received type ${typeof e.geometry}`);const t=new r(i.GEO_INTERSECTS,[e],this.fieldName);return this.and(t)}}function s(e){return e&&e instanceof r&&e._internalType===t.SYMBOL_QUERY_COMMAND}exports.QueryCommand=r,exports.isQueryCommand=s,exports.isKnownQueryCommand=function(e){return s(e)&&e.operator.toUpperCase()in i},exports.isComparisonCommand=function(e){return s(e)},exports.default=r;