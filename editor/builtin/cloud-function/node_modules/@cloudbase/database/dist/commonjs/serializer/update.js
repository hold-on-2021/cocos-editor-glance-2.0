"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("../commands/update"),t=require("../helper/symbol"),a=require("../utils/type"),n=require("../operator-map"),o=require("./common");class r{constructor(){}static encode(e){return(new r).encodeUpdate(e)}encodeUpdate(t){return e.isUpdateCommand(t)?this.encodeUpdateCommand(t):"object"===a.getType(t)?this.encodeUpdateObject(t):t}encodeUpdateCommand(a){if(a.fieldName===t.SYMBOL_UNSET_FIELD_NAME)throw new Error("Cannot encode a comparison command with unset field name");switch(a.operator){case e.UPDATE_COMMANDS_LITERAL.SET:case e.UPDATE_COMMANDS_LITERAL.REMOVE:case e.UPDATE_COMMANDS_LITERAL.INC:case e.UPDATE_COMMANDS_LITERAL.MUL:return this.encodeFieldUpdateCommand(a);case e.UPDATE_COMMANDS_LITERAL.PUSH:case e.UPDATE_COMMANDS_LITERAL.POP:case e.UPDATE_COMMANDS_LITERAL.SHIFT:case e.UPDATE_COMMANDS_LITERAL.UNSHIFT:return this.encodeArrayUpdateCommand(a);default:return this.encodeFieldUpdateCommand(a)}}encodeFieldUpdateCommand(t){const a=n.operatorToString(t.operator);switch(t.operator){case e.UPDATE_COMMANDS_LITERAL.REMOVE:return{[a]:{[t.fieldName]:""}};case e.UPDATE_COMMANDS_LITERAL.SET:case e.UPDATE_COMMANDS_LITERAL.INC:case e.UPDATE_COMMANDS_LITERAL.MUL:default:return{[a]:{[t.fieldName]:t.operands[0]}}}}encodeArrayUpdateCommand(t){const a=n.operatorToString(t.operator);switch(t.operator){case e.UPDATE_COMMANDS_LITERAL.PUSH:{const e={$each:t.operands.map(o.encodeInternalDataType)};return{[a]:{[t.fieldName]:e}}}case e.UPDATE_COMMANDS_LITERAL.UNSHIFT:{const e={$each:t.operands.map(o.encodeInternalDataType),$position:0};return{[a]:{[t.fieldName]:e}}}case e.UPDATE_COMMANDS_LITERAL.POP:return{[a]:{[t.fieldName]:1}};case e.UPDATE_COMMANDS_LITERAL.SHIFT:return{[a]:{[t.fieldName]:-1}};default:return{[a]:{[t.fieldName]:o.encodeInternalDataType(t.operands)}}}}encodeUpdateObject(t){const a=o.flattenQueryObject(t);for(const t in a){if(/^\$/.test(t))continue;let n=a[t];if(e.isUpdateCommand(n)){a[t]=n._setFieldName(t);const e=this.encodeUpdateCommand(a[t]);o.mergeConditionAfterEncode(a,e,t)}else{a[t]=n=o.encodeInternalDataType(n);const r=new e.UpdateCommand(e.UPDATE_COMMANDS_LITERAL.SET,[n],t),d=this.encodeUpdateCommand(r);o.mergeConditionAfterEncode(a,d,t)}}return a}}exports.UpdateSerializer=r;