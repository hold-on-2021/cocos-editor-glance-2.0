"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("../helper/symbol"),t=require("../utils/type"),i=require("./lineString");exports.MultiLineString=class{constructor(e){if(!t.isArray(e))throw new TypeError(`"lines" must be of type LineString[]. Received type ${typeof e}`);if(0===e.length)throw new Error("Polygon must contain 1 linestring at least");e.forEach(e=>{if(!(e instanceof i.LineString))throw new TypeError(`"lines" must be of type LineString[]. Received type ${typeof e}[]`)}),this.lines=e}parse(e){return{[e]:{type:"MultiLineString",coordinates:this.lines.map(e=>e.points.map(e=>[e.longitude,e.latitude]))}}}toJSON(){return{type:"MultiLineString",coordinates:this.lines.map(e=>e.points.map(e=>[e.longitude,e.latitude]))}}static validate(e){if("MultiLineString"!==e.type||!t.isArray(e.coordinates))return!1;for(let i of e.coordinates)for(let e of i)if(!t.isNumber(e[0])||!t.isNumber(e[1]))return!1;return!0}get _internalType(){return e.SYMBOL_GEO_MULTI_LINE_STRING}};