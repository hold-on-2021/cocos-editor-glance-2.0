"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("../helper/symbol"),t=require("../utils/type"),r=require("./lineString");exports.Polygon=class{constructor(e){if(!t.isArray(e))throw new TypeError(`"lines" must be of type LineString[]. Received type ${typeof e}`);if(0===e.length)throw new Error("Polygon must contain 1 linestring at least");e.forEach(e=>{if(!(e instanceof r.LineString))throw new TypeError(`"lines" must be of type LineString[]. Received type ${typeof e}[]`);if(!r.LineString.isClosed(e))throw new Error(`LineString ${e.points.map(e=>e.toReadableString())} is not a closed cycle`)}),this.lines=e}parse(e){return{[e]:{type:"Polygon",coordinates:this.lines.map(e=>e.points.map(e=>[e.longitude,e.latitude]))}}}toJSON(){return{type:"Polygon",coordinates:this.lines.map(e=>e.points.map(e=>[e.longitude,e.latitude]))}}static validate(e){if("Polygon"!==e.type||!t.isArray(e.coordinates))return!1;for(let r of e.coordinates){if(!this.isCloseLineString(r))return!1;for(let e of r)if(!t.isNumber(e[0])||!t.isNumber(e[1]))return!1}return!0}static isCloseLineString(e){const t=e[0],r=e[e.length-1];return t[0]===r[0]&&t[1]===r[1]}get _internalType(){return e.SYMBOL_GEO_MULTI_POLYGON}};