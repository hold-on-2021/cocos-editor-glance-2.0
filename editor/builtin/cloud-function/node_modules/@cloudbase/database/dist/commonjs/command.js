"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("./commands/query"),r=require("./commands/logic"),n=require("./commands/update"),t=require("./utils/type");exports.Command={eq:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.EQ,[r]),neq:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.NEQ,[r]),lt:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.LT,[r]),lte:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.LTE,[r]),gt:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.GT,[r]),gte:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.GTE,[r]),in:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.IN,r),nin:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.NIN,r),geoNear:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.GEO_NEAR,[r]),geoWithin:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.GEO_WITHIN,[r]),geoIntersects:r=>new e.QueryCommand(e.QUERY_COMMANDS_LITERAL.GEO_INTERSECTS,[r]),and(...e){const n=t.isArray(arguments[0])?arguments[0]:Array.from(arguments);return new r.LogicCommand(r.LOGIC_COMMANDS_LITERAL.AND,n)},nor(...e){const n=t.isArray(arguments[0])?arguments[0]:Array.from(arguments);return new r.LogicCommand(r.LOGIC_COMMANDS_LITERAL.NOR,n)},or(...e){const n=t.isArray(arguments[0])?arguments[0]:Array.from(arguments);return new r.LogicCommand(r.LOGIC_COMMANDS_LITERAL.OR,n)},set:e=>new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.SET,[e]),remove:()=>new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.REMOVE,[]),inc:e=>new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.INC,[e]),mul:e=>new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.MUL,[e]),push(...e){const r=t.isArray(arguments[0])?arguments[0]:Array.from(arguments);return new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.PUSH,r)},pop:()=>new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.POP,[]),shift:()=>new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.SHIFT,[]),unshift(...e){const r=t.isArray(arguments[0])?arguments[0]:Array.from(arguments);return new n.UpdateCommand(n.UPDATE_COMMANDS_LITERAL.UNSHIFT,r)},aggregate:{},project:{}};["abs","add","ceil","divide","exp","floor","ln","log","log10","mod","multiply","pow","sqrt","subtract","trunc","arrayElemAt","arrayToObject","concatArrays","filter","in","indexOfArray","isArray","map","objectToArray","range","reduce","reverseArray","size","slice","zip","and","not","or","cmp","eq","gt","gte","lt","lte","ne","cond","ifNull","switch","dayOfWeek","dateFromParts","dateFromString","dayOfMonth","dayOfWeek","dayOfYear","isoDayOfWeek","isoWeek","isoWeekYear","millisecond","minute","month","second","hour","week","year","literal","mergeObjects","objectToArray","allElementsTrue","anyElementTrue","setDifference","setEquals","setIntersection","setIsSubset","setUnion","concat","dateToString","indexOfBytes","indexOfCP","split","strLenBytes","strLenCP","strcasecmp","substr","substrBytes","substrCP","toLower","toUpper","meta","addToSet","avg","first","last","max","min","push","stdDevPop","stdDevSamp","sum","let"].forEach(e=>{let r=e;"ne"===e&&(r="neq"),exports.Command.aggregate[r]=function(r){return{[`$${e}`]:r}}});["slice","elemMatch"].forEach(e=>{let r=e;exports.Command.project[r]=function(r){return{[`$${e}`]:r}}}),exports.default=exports.Command;