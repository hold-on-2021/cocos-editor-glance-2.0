"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("./lib/util"),t=require("./index"),i=require("./validate"),s=require("./util"),r=require("./serializer/query"),l=require("./serializer/update"),o=require("./realtime/websocket-client");class d{constructor(e,i,s,r,l){this.watch=(e=>(t.Db.ws||(t.Db.ws=new o.RealtimeWebSocketClient({context:{appConfig:{docSizeLimit:1e3,realtimePingInterval:1e4,realtimePongWaitTimeout:5e3,getAccessToken:this._getAccessToken}}})),t.Db.ws.watch(Object.assign({},e,{envId:this._db.config.env,collectionName:this._coll,query:JSON.stringify(this._fieldFilters)})))),this._db=e,this._coll=i,this._fieldFilters=s,this._fieldOrders=r||[],this._queryOptions=l||{},this._request=new t.Db.reqClass(this._db.config),this._getAccessToken=t.Db.getAccessToken}get(t){t=t||e.createPromiseCallback();let i=[];this._fieldOrders&&this._fieldOrders.forEach(e=>{i.push(e)});let r={collectionName:this._coll};return this._fieldFilters&&(r.query=this._fieldFilters),i.length>0&&(r.order=i),this._queryOptions.offset&&(r.offset=this._queryOptions.offset),this._queryOptions.limit?r.limit=this._queryOptions.limit<100?this._queryOptions.limit:100:r.limit=100,this._queryOptions.projection&&(r.projection=this._queryOptions.projection),this._request.send("database.queryDocument",r).then(e=>{if(e.code)t(0,e);else{const i={data:s.Util.formatResDocumentData(e.data.list),requestId:e.requestId};e.TotalCount&&(i.total=e.TotalCount),e.Limit&&(i.limit=e.Limit),e.Offset&&(i.offset=e.Offset),t(0,i)}}).catch(e=>{t(e)}),t.promise}count(t){t=t||e.createPromiseCallback();let i={collectionName:this._coll};return this._fieldFilters&&(i.query=this._fieldFilters),this._request.send("database.countDocument",i).then(e=>{e.code?t(0,e):t(0,{requestId:e.requestId,total:e.data.total})}),t.promise}where(e){return new d(this._db,this._coll,r.QuerySerializer.encode(e),this._fieldOrders,this._queryOptions)}orderBy(e,t){i.Validate.isFieldPath(e),i.Validate.isFieldOrder(t);const s={field:e,direction:t},r=this._fieldOrders.concat(s);return new d(this._db,this._coll,this._fieldFilters,r,this._queryOptions)}limit(e){i.Validate.isInteger("limit",e);let t=Object.assign({},this._queryOptions);return t.limit=e,new d(this._db,this._coll,this._fieldFilters,this._fieldOrders,t)}skip(e){i.Validate.isInteger("offset",e);let t=Object.assign({},this._queryOptions);return t.offset=e,new d(this._db,this._coll,this._fieldFilters,this._fieldOrders,t)}update(t,i){if(i=i||e.createPromiseCallback(),!t||"object"!=typeof t)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(t.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});let s={collectionName:this._coll,query:this._fieldFilters,multi:!0,merge:!0,upsert:!1,data:l.UpdateSerializer.encode(t)};return this._request.send("database.updateDocument",s).then(e=>{e.code?i(0,e):i(0,{requestId:e.requestId,updated:e.data.updated,upsertId:e.data.upsert_id})}),i.promise}field(e){for(let t in e)e[t]?"object"!=typeof e[t]&&(e[t]=1):e[t]=0;let t=Object.assign({},this._queryOptions);return t.projection=e,new d(this._db,this._coll,this._fieldFilters,this._fieldOrders,t)}remove(t){t=t||e.createPromiseCallback(),Object.keys(this._queryOptions).length>0&&console.warn("`offset`, `limit` and `projection` are not supported in remove() operation"),this._fieldOrders.length>0&&console.warn("`orderBy` is not supported in remove() operation");const i={collectionName:this._coll,query:r.QuerySerializer.encode(this._fieldFilters),multi:!0};return this._request.send("database.deleteDocument",i).then(e=>{e.code?t(0,e):t(0,{requestId:e.requestId,deleted:e.data.deleted})}),t.promise}}exports.Query=d;