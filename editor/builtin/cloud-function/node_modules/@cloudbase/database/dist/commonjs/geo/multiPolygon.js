"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("../helper/symbol"),o=require("../utils/type"),t=require("./polygon");exports.MultiPolygon=class{constructor(e){if(!o.isArray(e))throw new TypeError(`"polygons" must be of type Polygon[]. Received type ${typeof e}`);if(0===e.length)throw new Error("MultiPolygon must contain 1 polygon at least");for(let o of e)if(!(o instanceof t.Polygon))throw new TypeError(`"polygon" must be of type Polygon[]. Received type ${typeof o}[]`);this.polygons=e}parse(e){return{[e]:{type:"MultiPolygon",coordinates:this.polygons.map(e=>e.lines.map(e=>e.points.map(e=>[e.longitude,e.latitude])))}}}toJSON(){return{type:"MultiPolygon",coordinates:this.polygons.map(e=>e.lines.map(e=>e.points.map(e=>[e.longitude,e.latitude])))}}static validate(e){if("MultiPolygon"!==e.type||!o.isArray(e.coordinates))return!1;for(let t of e.coordinates)for(let e of t)for(let t of e)if(!o.isNumber(t[0])||!o.isNumber(t[1]))return!1;return!0}get _internalType(){return e.SYMBOL_GEO_POLYGON}};