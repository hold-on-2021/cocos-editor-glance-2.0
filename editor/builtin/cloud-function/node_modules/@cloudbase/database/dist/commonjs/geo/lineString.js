"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const t=require("../helper/symbol"),e=require("./point"),i=require("../utils/type");exports.LineString=class{constructor(t){if(!i.isArray(t))throw new TypeError(`"points" must be of type Point[]. Received type ${typeof t}`);if(t.length<2)throw new Error('"points" must contain 2 points at least');t.forEach(t=>{if(!(t instanceof e.Point))throw new TypeError(`"points" must be of type Point[]. Received type ${typeof t}[]`)}),this.points=t}parse(t){return{[t]:{type:"LineString",coordinates:this.points.map(t=>t.toJSON().coordinates)}}}toJSON(){return{type:"LineString",coordinates:this.points.map(t=>t.toJSON().coordinates)}}static validate(t){if("LineString"!==t.type||!i.isArray(t.coordinates))return!1;for(let e of t.coordinates)if(!i.isNumber(e[0])||!i.isNumber(e[1]))return!1;return!0}static isClosed(t){const e=t.points[0],i=t.points[t.points.length-1];if(e.latitude===i.latitude&&e.longitude===i.longitude)return!0}get _internalType(){return t.SYMBOL_GEO_LINE_STRING}};