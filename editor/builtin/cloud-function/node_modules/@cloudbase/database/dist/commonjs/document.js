"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("./lib/util"),t=require("./index"),i=require("./util"),s=require("./serializer/update"),r=require("./serializer/datatype"),o=require("./commands/update"),a=require("./realtime/websocket-client");class d{constructor(e,i,s,r={}){this.watch=(e=>(t.Db.ws||(t.Db.ws=new a.RealtimeWebSocketClient({context:{appConfig:{docSizeLimit:1e3,realtimePingInterval:1e4,realtimePongWaitTimeout:5e3,getAccessToken:this._getAccessToken}}})),t.Db.ws.watch(Object.assign({},e,{envId:this._db.config.env,collectionName:this._coll,query:JSON.stringify({_id:this.id})})))),this._db=e,this._coll=i,this.id=s,this.request=new t.Db.reqClass(this._db.config),this.projection=r,this._getAccessToken=t.Db.getAccessToken}create(t,i){i=i||e.createPromiseCallback();let s={collectionName:this._coll,data:r.serialize(t)};return this.id&&(s._id=this.id),this.request.send("database.addDocument",s).then(e=>{e.code?i(0,e):i(0,{id:e.data._id,requestId:e.requestId})}).catch(e=>{i(e)}),i.promise}set(t,i){if(i=i||e.createPromiseCallback(),!this.id)return Promise.resolve({code:"INVALID_PARAM",message:"docId不能为空"});if(!t||"object"!=typeof t)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(t.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});let s=!1;const a=e=>{if("object"==typeof e)for(let t in e)e[t]instanceof o.UpdateCommand?s=!0:"object"==typeof e[t]&&a(e[t])};if(a(t),s)return Promise.resolve({code:"DATABASE_REQUEST_FAILED",message:"update operator complicit"});let d={collectionName:this._coll,data:r.serialize(t),multi:!1,merge:!1,upsert:!0};return this.id&&(d.query={_id:this.id}),this.request.send("database.updateDocument",d).then(e=>{e.code?i(0,e):i(0,{updated:e.data.updated,upsertedId:e.data.upserted_id,requestId:e.requestId})}).catch(e=>{i(e)}),i.promise}update(t,i){if(i=i||e.createPromiseCallback(),!t||"object"!=typeof t)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(t.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});const r={_id:this.id},o={collectionName:this._coll,data:s.UpdateSerializer.encode(t),query:r,multi:!1,merge:!0,upsert:!1};return this.request.send("database.updateDocument",o).then(e=>{e.code?i(0,e):i(0,{updated:e.data.updated,upsertedId:e.data.upserted_id,requestId:e.requestId})}).catch(e=>{i(e)}),i.promise}remove(t){t=t||e.createPromiseCallback();const i={_id:this.id},s={collectionName:this._coll,query:i,multi:!1};return this.request.send("database.deleteDocument",s).then(e=>{e.code?t(0,e):t(0,{deleted:e.data.deleted,requestId:e.requestId})}).catch(e=>{t(e)}),t.promise}get(t){t=t||e.createPromiseCallback();const s={_id:this.id},r={collectionName:this._coll,query:s,multi:!1,projection:this.projection};return this.request.send("database.queryDocument",r).then(e=>{if(e.code)t(0,e);else{const s=i.Util.formatResDocumentData(e.data.list);t(0,{data:s,requestId:e.requestId,total:e.TotalCount,limit:e.Limit,offset:e.Offset})}}).catch(e=>{t(e)}),t.promise}field(e){for(let t in e)e[t]?e[t]=1:e[t]=0;return new d(this._db,this._coll,this.id,e)}}exports.DocumentReference=d;