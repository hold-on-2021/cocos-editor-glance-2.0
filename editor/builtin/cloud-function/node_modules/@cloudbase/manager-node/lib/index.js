"use strict";const e=require("./environmentManager"),n=require("./utils"),t=require("./constant"),r=require("./context");class o{constructor(o){if(this.cloudBaseConfig={},o.secretId&&o.secretKey)this.cloudBaseConfig.secretId=o.secretId,this.cloudBaseConfig.secretKey=o.secretKey,o.token&&(this.cloudBaseConfig.token=o.token);else{if(n.getRuntime()!==t.RUN_ENV.SCF)throw new Error(t.ERROR.MISS_SECRET_INFO_IN_ARGS);{const e=n.getEnvVar(t.ENV_NAME.ENV_SECRETID),r=n.getEnvVar(t.ENV_NAME.ENV_SECRETKEY),o=n.getEnvVar(t.ENV_NAME.ENV_SESSIONTOKEN);if(!e||!r)throw new Error(t.ERROR.MISS_SECRET_INFO_IN_ENV);this.cloudBaseConfig={secretId:e,secretKey:r,token:o}}}o.envId&&(this.cloudBaseConfig.envId=o.envId),o.proxy&&(this.cloudBaseConfig.proxy=o.proxy),this.context=new r.CloudBaseContext(this.cloudBaseConfig),this.environmentManager=new e.EnvironmentManager(this.context),this.environmentManager.add(o.envId||"")}static init(e){return o.cloudBase||(o.cloudBase=new o(e)),o.cloudBase}addEnvironment(e){this.environmentManager.add(e)}currentEnvironment(){return this.environmentManager.getCurrentEnv()}get functions(){return this.currentEnvironment().getFunctionService()}get storage(){return this.currentEnvironment().getStorageService()}get database(){return this.currentEnvironment().getDatabaseService()}get commonService(){return this.currentEnvironment().getCommonService()}get env(){return this.currentEnvironment().getEnvService()}getEnvironmentManager(){return this.environmentManager}getManagerConfig(){return this.cloudBaseConfig}}module.exports=o;