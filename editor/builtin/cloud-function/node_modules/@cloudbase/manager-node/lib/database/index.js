"use strict";var e=this&&this.__decorate||function(e,t,i,s){var a,n=arguments.length,r=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,s);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(r=(n<3?a(r):n>3?a(t,i,r):a(t,i))||r);return n>3&&r&&Object.defineProperty(t,i,r),r},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const i=t(require("path")),s=require("../error"),a=require("../utils");class n{constructor(e){this.DEFAULT_MGO_OFFSET=0,this.DEFAULT_MGO_LIMIT=100,this.environment=e,this.envId=e.getEnvId(),this.dbOpService=new a.CloudService(e.cloudBaseContext,n.tcbServiceVersion.service,n.tcbServiceVersion.version),this.collOpService=new a.CloudService(e.cloudBaseContext,n.flexdbServiceVersion.service,n.flexdbServiceVersion.version)}getCurrEnvironment(){return this.environment}getDatabaseConfig(){const e=this.environment,{Databases:t}=e.lazyEnvironmentConfig;return{Tag:t[0].InstanceId}}async checkCollectionExists(e){try{return{RequestId:(await this.describeCollection(e)).RequestId,Exists:!0}}catch(e){return{RequestId:e.requestId,Msg:e.message,Exists:!1}}}async createCollection(e){let{Tag:t}=this.getDatabaseConfig();return await this.collOpService.request("CreateTable",{Tag:t,TableName:e})}async deleteCollection(e){const t=await this.checkCollectionExists(e);if(t.Exists){let{Tag:t}=this.getDatabaseConfig();return await this.collOpService.request("DeleteTable",{Tag:t,TableName:e})}return t}async updateCollection(e,t){let{Tag:i}=this.getDatabaseConfig();return await this.collOpService.request("UpdateTable",Object.assign({Tag:i,TableName:e},t))}async describeCollection(e){let{Tag:t}=this.getDatabaseConfig();return await this.collOpService.request("DescribeTable",{Tag:t,TableName:e})}async listCollections(e={MgoLimit:this.DEFAULT_MGO_LIMIT,MgoOffset:this.DEFAULT_MGO_OFFSET}){let{Tag:t}=this.getDatabaseConfig();void 0===e.MgoLimit&&(e.MgoLimit=this.DEFAULT_MGO_LIMIT),void 0===e.MgoOffset&&(e.MgoOffset=this.DEFAULT_MGO_OFFSET);const i=await this.collOpService.request("ListTables",Object.assign({Tag:t},e));return null===i.Tables?i.Collections=[]:i.Collections=i.Tables.map(e=>(e.CollectionName=e.TableName,delete e.TableName,e)),delete i.Tables,i}async createCollectionIfNotExists(e){const t=await this.checkCollectionExists(e);let i;return t.Exists?{RequestId:"",IsCreated:!1,ExistsResult:t}:{RequestId:(i=await this.createCollection(e)).RequestId,IsCreated:!0,ExistsResult:t}}async checkIndexExists(e,t){const i=await this.describeCollection(e);let s=i.Indexes.some(e=>e.Name===t);return{RequestId:i.RequestId,Exists:s}}async distribution(){return await this.dbOpService.request("DescribeDbDistribution",{EnvId:this.envId})}async migrateStatus(e){return await this.dbOpService.request("DatabaseMigrateQueryInfo",{EnvId:this.envId,JobId:e})}async import(e,t,a){let n,r;if(t.FilePath){let e="tmp/db-imports/";a.ObjectKeyPrefix&&(e=a.ObjectKeyPrefix,delete a.ObjectKeyPrefix),n=i.default.join(e,i.default.basename(t.FilePath)),await this.environment.getStorageService().uploadFile({localPath:t.FilePath,cloudPath:n}),r=i.default.extname(n).substring(1)}else{if(!t.ObjectKey)throw new s.CloudBaseError("Miss file.filePath or file.objectKey");delete a.ObjectKeyPrefix,n=t.ObjectKey,r=i.default.extname(n).substring(1)}return t.FileType&&(r=t.FileType),this.dbOpService.request("DatabaseMigrateImport",Object.assign({CollectionName:e,FilePath:n,FileType:r,EnvId:this.envId},a))}async export(e,t,a){let n,r;if(!t.ObjectKey)throw new s.CloudBaseError("Miss file.filePath or file.objectKey");return n=t.ObjectKey,r=i.default.extname(n).substring(1),t.FileType&&(r=t.FileType),this.dbOpService.request("DatabaseMigrateExport",Object.assign({CollectionName:e,FilePath:n,FileType:r,EnvId:this.envId},a))}}n.tcbServiceVersion={service:"tcb",version:"2018-06-08"},n.flexdbServiceVersion={service:"flexdb",version:"2018-11-27"},e([function(e,t,i){let s=i.value;i.value=async function(){const e=this.environment;return e.inited||await e.lazyInit(),await s.apply(this,arguments)}}],n.prototype,"createCollection",null),e([function(e,t,i){let s=i.value;i.value=async function(){const e=this.environment;return e.inited||await e.lazyInit(),await s.apply(this,arguments)}}],n.prototype,"deleteCollection",null),e([function(e,t,i){let s=i.value;i.value=async function(){const e=this.environment;return e.inited||await e.lazyInit(),await s.apply(this,arguments)}}],n.prototype,"updateCollection",null),e([function(e,t,i){let s=i.value;i.value=async function(){const e=this.environment;return e.inited||await e.lazyInit(),await s.apply(this,arguments)}}],n.prototype,"describeCollection",null),e([function(e,t,i){let s=i.value;i.value=async function(){const e=this.environment;return e.inited||await e.lazyInit(),await s.apply(this,arguments)}}],n.prototype,"listCollections",null),exports.DatabaseService=n;