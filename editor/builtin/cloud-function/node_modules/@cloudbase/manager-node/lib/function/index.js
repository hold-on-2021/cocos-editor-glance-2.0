"use strict";var e=this&&this.__decorate||function(e,t,n,i){var o,r=arguments.length,a=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(r<3?o(a):r>3?o(t,n,a):o(t,n))||a);return r>3&&a&&Object.defineProperty(t,n,a),a},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const n=require("./packer"),i=require("../error"),o=require("../utils"),r=require("../constant"),a=require("../utils/fs"),s=t(require("path")),c=t(require("fs"));function u(e,t){var n;if(t&&!/^[A-Za-z0-9+=/]{1,160}$/.test(t))throw new i.CloudBaseError('CodeSecret 格式错误，CodeSecret 只能包含 1-160 位大小字母、数字、"+"、"="、"/"');const o=["Nodejs8.9","Php7","Java8"];if((null===(n=e)||void 0===n?void 0:n.runtime)&&!o.includes(e.runtime))throw new i.CloudBaseError(`${e.name} Invalid runtime value：${e.runtime}. Now only support: ${o.join(", ")}`)}class l{constructor(e){this.tcbRole={Role:"TCB_QcsRole",Stamp:"MINI_QCBASE"},this.environment=e,this.scfService=new o.CloudService(e.cloudBaseContext,"scf","2018-04-16"),this.vpcService=new o.CloudService(e.cloudBaseContext,"vpc","2017-03-12")}async updateFunctionIncrementalCode(e){const{namespace:t}=this.getFunctionConfig(),{functionRootPath:o,func:r,deleteFiles:a,addFiles:s}=e,{name:c,runtime:l}=r,d={FunctionName:c,Namespace:t};let p,m;if(u(r),a&&(d.DeleteFiles=a),s){p=new n.FunctionPacker(o,c,[],s);const e="Java8"===r.runtime?n.CodeType.JavaFile:n.CodeType.File;if(!(m=await p.build(e)))throw new i.CloudBaseError("函数不存在！");d.AddFiles=m}return await this.scfService.request("UpdateFunctionIncrementalCode",d)}async createFunction(e){var t,o,r,a,s,c,l,d;const{namespace:p}=this.getFunctionConfig(),{func:m,functionRootPath:y,force:f=!1,base64Code:v,codeSecret:g}=e;let h,F;const C=m.name;let w;if(u(m,g),w="Nodejs8.9"===m.runtime?"TRUE":"FALSE",void 0!==m.installDependency&&(w=m.installDependency?"TRUE":"FALSE"),v)h=v;else{const e="TRUE"===w?["node_modules/**/*","node_modules",...m.ignore||[]]:[...m.ignore||[]];F=new n.FunctionPacker(y,C,e);const t="Java8"===m.runtime?n.CodeType.JavaFile:n.CodeType.File;if(!(h=await F.build(t)))throw new i.CloudBaseError("函数不存在！")}const S=Object.keys(m.envVariables||{}).map(e=>({Key:e,Value:m.envVariables[e]})),N={FunctionName:C,Namespace:p,Code:{ZipFile:h},MemorySize:256,Role:"TCB_QcsRole",Stamp:"MINI_QCBASE",L5Enable:void 0===(null===(t=m)||void 0===t?void 0:t.l5)?null:(null===(o=m)||void 0===o?void 0:o.l5)?"TRUE":"FALSE"};S.length&&(N.Environment={Variables:S}),N.Handler=m.handler||"index.main",N.Timeout=Number(m.timeout)||20,N.Runtime=m.runtime||"Nodejs8.9",N.VpcConfig={SubnetId:(null===(a=null===(r=m)||void 0===r?void 0:r.vpc)||void 0===a?void 0:a.subnetId)||"",VpcId:(null===(c=null===(s=m)||void 0===s?void 0:s.vpc)||void 0===c?void 0:c.vpcId)||""},N.InstallDependency=w,g&&(N.CodeSecret=g),(null===(d=null===(l=m)||void 0===l?void 0:l.layers)||void 0===d?void 0:d.length)&&(N.Layers=m.layers);try{const e=await this.scfService.request("CreateFunction",N);return await this.retryCreateTrigger(C,m.triggers),N.InstallDependency&&!0===m.isWaitInstall&&await this.waitFunctionActive(C,g),e}catch(e){if("ResourceInUse.FunctionName"===e.code&&f){return{triggerRes:await this.createFunctionTriggers(C,m.triggers),configRes:await this.updateFunctionConfig(m),codeRes:await this.retryUpdateFunctionCode({func:m,functionRootPath:y,base64Code:h,codeSecret:g})}}if(e.message&&!f)throw new i.CloudBaseError(`[${C}] 部署失败：\n${e.message}`,{code:e.code,requestId:e.requestId});throw e}}async listFunctions(e=20,t=0){const{namespace:n}=this.getFunctionConfig(),i=await this.scfService.request("ListFunctions",{Namespace:n,Limit:e,Offset:t}),{Functions:o=[]}=i,r=[];return o.forEach(e=>{const{FunctionId:t,FunctionName:n,Runtime:i,AddTime:o,ModTime:a,Status:s}=e;r.push({FunctionId:t,FunctionName:n,Runtime:i,AddTime:o,ModTime:a,Status:s})}),r}async deleteFunction(e){const{namespace:t}=this.getFunctionConfig();return this.scfService.request("DeleteFunction",{FunctionName:e,Namespace:t})}async getFunctionDetail(e,t){const{namespace:n}=this.getFunctionConfig(),i={FunctionName:e,Namespace:n,ShowCode:"TRUE"};t&&(i.CodeSecret=t);const o=await this.scfService.request("GetFunction",i),r={},a=["Status","CodeInfo","CodeSize","Environment","FunctionName","Handler","MemorySize","ModTime","Namespace","Runtime","Timeout","Triggers","VpcConfig"];Object.keys(o).forEach(e=>{a.includes(e)&&(r[e]=o[e])});const{VpcId:s="",SubnetId:c=""}=r.VpcConfig||{};if(s&&c)try{const e=await this.getVpcs(),t=await this.getSubnets(s),n=e.find(e=>e.VpcId===s),i=t.find(e=>e.SubnetId===c);r.VpcConfig={vpc:n,subnet:i}}catch(e){r.VPC={vpc:"",subnet:""}}return r}async getFunctionLogs(e){const{name:t,offset:n=0,limit:i=10,order:o,orderBy:r,startTime:a,endTime:s,requestId:c}=e,{namespace:u}=this.getFunctionConfig(),l={Namespace:u,FunctionName:t,Offset:n,Limit:i,Order:o,OrderBy:r,StartTime:a,EndTime:s,FunctionRequestId:c};return await this.scfService.request("GetFunctionLogs",l)}async updateFunctionConfig(e){var t,n,i,o,r,a;const{namespace:s}=this.getFunctionConfig(),c=Object.keys(e.envVariables||{}).map(t=>({Key:t,Value:e.envVariables[t]})),u=void 0===e.l5?null:e.l5?"TRUE":"FALSE",l={FunctionName:e.name,Namespace:s,L5Enable:u};return c.length&&(l.Environment={Variables:c}),e.timeout&&(l.Timeout=e.timeout),e.runtime&&(l.Runtime=e.runtime),l.VpcConfig={SubnetId:(null===(n=null===(t=e)||void 0===t?void 0:t.vpc)||void 0===n?void 0:n.subnetId)||"",VpcId:(null===(o=null===(i=e)||void 0===i?void 0:i.vpc)||void 0===o?void 0:o.vpcId)||""},"Nodejs8.9"===e.runtime&&(l.InstallDependency="TRUE"),void 0!==e.installDependency&&(l.InstallDependency=e.installDependency?"TRUE":"FALSE"),(null===(a=null===(r=e)||void 0===r?void 0:r.layers)||void 0===a?void 0:a.length)&&(l.Layers=e.layers),this.scfService.request("UpdateFunctionConfiguration",l)}async updateFunctionCode(e){let t,o;const{func:r,functionRootPath:a,base64Code:s,codeSecret:c}=e,l=r.name,{namespace:d}=this.getFunctionConfig();let p;if(u(r),p="Nodejs8.9"===r.runtime?"TRUE":"FALSE",void 0!==r.installDependency&&(p=r.installDependency?"TRUE":"FALSE"),s)t=s;else{const e="TRUE"===p?["node_modules/**/*","node_modules",...r.ignore||[]]:[...r.ignore||[]];o=new n.FunctionPacker(a,l,e);const s="Java8"===r.runtime?n.CodeType.JavaFile:n.CodeType.File;if(!(t=await o.build(s)))throw new i.CloudBaseError("函数不存在！")}const m={FunctionName:l,Namespace:d,ZipFile:t,Handler:r.handler||"index.main",InstallDependency:p};c&&(m.CodeSecret=c);try{const e=await this.scfService.request("UpdateFunctionCode",m);return p&&!0===r.isWaitInstall&&await this.waitFunctionActive(l,c),e}catch(e){throw new i.CloudBaseError(`[${l}] 函数代码更新失败： ${e.message}`,{code:e.code})}}async invokeFunction(e,t){const{namespace:n}=this.getFunctionConfig(),o={FunctionName:e,Namespace:n,LogType:"Tail"};t&&(o.ClientContext=JSON.stringify(t));try{const{RequestId:t,Result:n}=await this.scfService.request("Invoke",o);return Object.assign({RequestId:t},n)}catch(t){throw new i.CloudBaseError(`[${e}] 调用失败：\n${t.message}`)}}async copyFunction(e,t,n,o=!1){const{namespace:r}=this.getFunctionConfig();if(!r||!e||!t)throw new i.CloudBaseError("参数缺失");return this.scfService.request("CopyFunction",{FunctionName:e,NewFunctionName:t,Namespace:r,TargetNamespace:n||r,Override:!!o})}async createFunctionTriggers(e,t=[]){if(!t||!t.length)return null;const{namespace:n}=this.getFunctionConfig(),o=t.map(e=>{if("timer"!==e.type)throw new i.CloudBaseError(`不支持的触发器类型 [${e.type}]，目前仅支持定时触发器（timer）！`);return{TriggerName:e.name,Type:e.type,TriggerDesc:e.config}});return this.scfService.request("BatchCreateTrigger",{FunctionName:e,Namespace:n,Triggers:JSON.stringify(o),Count:o.length})}async deleteFunctionTrigger(e,t){const{namespace:n}=this.getFunctionConfig();return this.scfService.request("DeleteTrigger",{FunctionName:e,Namespace:n,TriggerName:t,Type:"timer"})}async getFunctionDownloadUrl(e,t){const{namespace:n}=this.getFunctionConfig(),o={FunctionName:e,Namespace:n};t&&(o.CodeSecret=t);try{const{Url:t,CodeSha256:n,RequestId:r}=await this.scfService.request("GetFunctionAddress",o);return{Url:t,RequestId:r,CodeSha256:n}}catch(t){throw new i.CloudBaseError(`[${e}] 获取函数代码下载链接失败：\n${t.message}`)}}async createLayer(e){const{contentPath:t="",name:n,base64Content:r="",runtimes:u=[],description:l="",licenseInfo:d=""}=e,p=["Nodejs8.9","Php7","Java8"];if(u.some(e=>-1===p.indexOf(e)))throw new i.CloudBaseError(`Invalid runtime value. Now only support: ${p.join(", ")}`);let m;if(r)m=r;else if(a.isDirectory(t)){const e=s.default.parse(t).name,n=s.default.join(process.cwd(),`temp-${e}.zip`);a.checkPathExist(n)&&a.delSync(n),await o.zipDir({dirPath:t,outputPath:n}),m=(await c.default.promises.readFile(n)).toString("base64"),a.delSync(n)}else{if(".zip"!==s.default.extname(t))throw new i.CloudBaseError("文件类型不正确，目前只支持 ZIP 文件！");m=(await c.default.promises.readFile(t)).toString("base64")}return this.scfService.request("PublishLayerVersion",{LayerName:n,CompatibleRuntimes:u,Content:{ZipFile:m},Description:l,LicenseInfo:d})}async deleteLayerVersion(e){const{name:t,version:n}=e;return this.scfService.request("DeleteLayerVersion",{LayerName:t,LayerVersion:n})}async listLayerVersions(e){var t;const{name:n,runtimes:o}=e;let r={LayerName:n};if(null===(t=o)||void 0===t?void 0:t.length){const e=["Nodejs8.9","Php7","Java8"];if(o.some(t=>-1===e.indexOf(t)))throw new i.CloudBaseError(`Invalid runtime value. Now only support: ${e.join(", ")}`);r.CompatibleRuntime=o}return this.scfService.request("ListLayerVersions",r)}async listLayers(e){const{limit:t=20,offset:n=0,runtime:o,searchKey:r}=e;let a={Limit:t,Offset:n,SearchKey:r};if(o){const e=["Nodejs8.9","Php7","Java8"];if(-1===e.indexOf(o))throw new i.CloudBaseError(`Invalid runtime value. Now only support: ${e.join(", ")}`);a.CompatibleRuntime=o}return this.scfService.request("ListLayers",a)}async getLayerVersion(e){const{name:t,version:n}=e;return this.scfService.request("GetLayerVersion",{LayerName:t,LayerVersion:n})}async retryCreateTrigger(e,t,n=0){try{await this.createFunctionTriggers(e,t)}catch(i){if(!(n<3))throw i;await o.sleep(500),await this.retryCreateTrigger(e,t,n+1)}}async retryUpdateFunctionCode(e,t=0){try{return await this.updateFunctionCode(e)}catch(n){if(t<3)return await o.sleep(500),this.retryUpdateFunctionCode(e,t+1);throw n}}getFunctionConfig(){const e=this.environment.lazyEnvironmentConfig;return{namespace:e.Functions[0].Namespace,env:e.EnvId}}async getVpcs(){const{VpcSet:e}=await this.vpcService.request("DescribeVpcs");return e}async getSubnets(e){const{SubnetSet:t}=await this.vpcService.request("DescribeSubnets",{Filters:[{Name:"vpc-id",Values:[e]}]});return t}async waitFunctionActive(e,t){let n;do{const{Status:i}=await this.getFunctionDetail(e,t);await o.sleep(1e3),n=i}while(n===r.SCF_STATUS.CREATING||n===r.SCF_STATUS.UPDATING)}}e([o.preLazy()],l.prototype,"updateFunctionIncrementalCode",null),e([o.preLazy()],l.prototype,"createFunction",null),e([o.preLazy()],l.prototype,"listFunctions",null),e([o.preLazy()],l.prototype,"deleteFunction",null),e([o.preLazy()],l.prototype,"getFunctionDetail",null),e([o.preLazy()],l.prototype,"getFunctionLogs",null),e([o.preLazy()],l.prototype,"updateFunctionConfig",null),e([o.preLazy()],l.prototype,"updateFunctionCode",null),e([o.preLazy()],l.prototype,"invokeFunction",null),e([o.preLazy()],l.prototype,"copyFunction",null),e([o.preLazy()],l.prototype,"createFunctionTriggers",null),e([o.preLazy()],l.prototype,"deleteFunctionTrigger",null),e([o.preLazy()],l.prototype,"getFunctionDownloadUrl",null),exports.FunctionService=l;