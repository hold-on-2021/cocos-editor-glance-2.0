"use strict";var e=this&&this.__decorate||function(e,t,n,i){var o,r=arguments.length,s=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,i);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(r<3?o(s):r>3?o(t,n,s):o(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const n=t(require("cos-nodejs-sdk-v5")),i=t(require("util")),o=require("../error"),r=require("../utils"),s=require("../cam"),a=require("../constant"),c=require("../billing");class u{constructor(e){this.environment=e,this.envId=e.getEnvId(),this.cloudService=new r.CloudService(e.cloudBaseContext,"tcb","2018-06-08"),this.camService=new s.CamService(e.cloudBaseContext),this.billService=new c.BillingService(e.cloudBaseContext)}async listEnvs(){return this.cloudService.request("DescribeEnvs")}async createEnv(e){const{name:t,paymentMode:n,channel:i}=e,{Initialized:s}=await this.checkTcbService();if(!s){let e=!1;try{await this.camService.getRole(a.ROLE_NAME.TCB);e=!0}catch(e){if("InvalidParameter.RoleNotExist"!==e.code)throw e}if(!e){const e=await this.camService.createRole({RoleName:a.ROLE_NAME.TCB,Description:"云开发(TCB)操作权限含在访问管理(CAM)创建角色，新增角色载体，给角色绑定策略；含读写对象存储(COS)数据；含读写无服务器云函数(SCF)数据；含读取云监控(Monitor)数据。",PolicyDocument:'{"version":"2.0","statement":[{"action":"sts:AssumeRole","effect":"allow","principal":{"service":["scf.qcloud.com","tcb.cloud.tencent.com"]}}]}'}),{RoleId:t}=e;await this.camService.attachRolePolicy({PolicyId:8825032,AttachRoleName:a.ROLE_NAME.TCB})}await this.initTcb()}const c={Alias:t,EnvId:`${t}-${r.guid6()}`,Source:"qcloud"};i&&(c.Channel=i);const{EnvId:u}=await this.cloudService.request("CreateEnv",c),l=n||"postpay";let d=!1,v=!1,h=!1,g=null;if("prepay"===l){const e=[{GoodsCategoryId:101183,RegionId:1,ZoneId:0,GoodsNum:1,ProjectId:0,PayMode:1,Platform:1,GoodsDetail:JSON.stringify({productCode:"p_tcb",subProductCode:"sp_tcb_basic",resourceId:u,pid:16677,timeUnit:"m",timeSpan:1,tcb_cos:1,tcb_cdn:1,tcb_scf:1,tcb_mongodb:1,region:"ap-shanghai",zone:"ap-shanghai-1",source:"qcloud",envId:u,packageId:"basic",isAutoRenew:"true",tranType:1,productInfo:[{name:"套餐版本",value:"基础版 1"},{name:"存储空间",value:"5GB"},{name:"CDN流量",value:"5GB"},{name:"云函数资源使用量",value:"4万GBs"},{name:"数据库容量",value:"2GB"},{name:"数据库同时连接数",value:"20个"}]})}];let t=[];try{const{OrderIds:n}=await this.billService.GenerateDeals(e);t=n,d=!0}catch(e){g=e}if(d)try{const{OrderIds:e}=await this.billService.PayDeals(t);if(e[0]!==t[0])throw new o.CloudBaseError("支付成功的订单号不一致");v=!0}catch(e){g=new o.CloudBaseError("预付费订单支付失败，请进入订单管理页面(https://console.cloud.tencent.com/deal)重新支付",{original:e})}}if("postpay"===l)try{const{TranId:e}=await this.CreatePostpayPackage(u);h=!0}catch(e){g=e}if("prepay"===l){if(!d)throw await this.destroyEnv(u),g;if(!v)throw g}if("postpay"===l&&!h)throw await this.destroyEnv(u),g;return{envId:u}}async getEnvAuthDomains(){return this.cloudService.request("DescribeAuthDomains",{EnvId:this.envId})}async createEnvDomain(e){const t=await this.cloudService.request("CreateAuthDomain",{EnvId:this.envId,Domains:e}),n=e.map(async e=>{this.modifyCosCorsDomain(e)});return await Promise.all(n),t}async deleteEnvDomain(e){const{Domains:t}=await this.getEnvAuthDomains(),n=t.filter(t=>e.includes(t.Domain)).map(e=>e.Id),i=await this.cloudService.request("DeleteAuthDomain",{EnvId:this.envId,DomainIds:n}),o=e.map(async e=>{this.modifyCosCorsDomain(e,!0)});return await Promise.all(o),i}async checkTcbService(){return await this.cloudService.request("CheckTcbService",{})}async initTcb(){return await this.cloudService.request("InitTcb",{})}async CreatePostpayPackage(e,t){const n=t||"qcloud";return this.cloudService.request("CreatePostpayPackage",{EnvId:e,Source:n})}async destroyEnv(e){return await this.cloudService.request("DestroyEnv",{EnvId:e})}async getEnvInfo(){var e;const{EnvList:t,RequestId:n}=await this.cloudService.request("DescribeEnvs",{EnvId:this.envId});return{EnvInfo:(null===(e=t)||void 0===e?void 0:e.length)?t[0]:{},RequestId:n}}async updateEnvInfo(e){return this.cloudService.request("ModifyEnv",{EnvId:this.envId,Alias:e})}async getLoginConfigList(){return this.cloudService.request("DescribeLoginConfigs",{EnvId:this.envId})}async createLoginConfig(e,t,n){let i=n;if(!["WECHAT-OPEN","WECHAT-PUBLIC","QQ","ANONYMOUS"].includes(e))throw new o.CloudBaseError(`Invalid platform value: ${e}. Now only support 'WECHAT-OPEN', 'WECHAT-PUBLIC', 'QQ', 'ANONYMOUS'`);return"ANONYMOUS"===e&&(i="anonymous"),this.cloudService.request("CreateLoginConfig",{EnvId:this.envId,Platform:e,PlatformId:t,PlatformSecret:r.rsaEncrypt(i),Status:"ENABLE"})}async updateLoginConfig(e,t="ENABLE",n="",i=""){let s=i;if(!["ENABLE","DISABLE"].includes(t))throw new o.CloudBaseError(`Invalid status value: ${t}. Only support 'ENABLE', 'DISABLE'`);const a={EnvId:this.envId,ConfigId:e,Status:t};return"anonymous"===n&&(s="anonymous"),n&&(a.PlatformId=n),s&&(a.PlatformSecret=r.rsaEncrypt(s)),this.cloudService.request("UpdateLoginConfig",a)}async createCustomLoginKeys(){return await this.cloudService.request("CreateCustomLoginKeys",{EnvId:this.envId})}async getCOSDomains(){const e=this.getCos(),t=i.default.promisify(e.getBucketCors).bind(e),{bucket:n,region:o}=this.getStorageConfig();return(await t({Bucket:n,Region:o})).CORSRules}async modifyCosCorsDomain(e,t=!1){const n=this.getCos(),o=i.default.promisify(n.putBucketCors).bind(n),{bucket:r,region:s}=this.getStorageConfig();let a=await this.getCOSDomains();a=a.filter(t=>!(t.AllowedOrigins&&2===t.AllowedOrigins.length&&t.AllowedOrigins[0]===`http://${e}`&&t.AllowedOrigins[1]===`https://${e}`)),t||a.push({AllowedOrigin:[`http://${e}`,`https://${e}`],AllowedMethod:["GET","POST","PUT","DELETE","HEAD"],AllowedHeader:["*"],ExposeHeader:["Etag","Date"],MaxAgeSeconds:"5"}),await o({Bucket:r,Region:s,CORSRules:a})}getCos(){const{secretId:e,secretKey:t,token:i}=this.getAuthConfig();return i?new n.default({getAuthorization:function(n,o){o({TmpSecretId:e,TmpSecretKey:t,XCosSecurityToken:i,ExpiredTime:36e5})}}):new n.default({SecretId:e,SecretKey:t})}getAuthConfig(){const{secretId:e,secretKey:t,token:n}=this.environment.cloudBaseContext;return{envId:this.environment.getEnvId(),secretId:e,secretKey:t,token:n}}getStorageConfig(){const e=this.environment.lazyEnvironmentConfig,t=e.Storages&&e.Storages[0],{Region:n,Bucket:i}=t;return{env:e.EnvId,region:n,bucket:i}}}e([r.preLazy()],u.prototype,"createEnvDomain",null),e([r.preLazy()],u.prototype,"deleteEnvDomain",null),exports.EnvService=u;