"use strict";const e=require("fs"),r=require("path"),t=require("pify"),s={mode:511&~process.umask(),fs:e},o=e=>{if("win32"===process.platform){if(/[<>:"|?*]/.test(e.replace(r.parse(e).root,""))){const r=new Error(`Path contains invalid characters: ${e}`);throw r.code="EINVAL",r}}};module.exports=((e,i)=>Promise.resolve().then(()=>{o(e),i=Object.assign({},s,i);const n=t(i.fs.mkdir),c=t(i.fs.stat),a=e=>n(e,i.mode).then(()=>e).catch(t=>{if("ENOENT"===t.code){if(t.message.includes("null bytes")||r.dirname(e)===e)throw t;return a(r.dirname(e)).then(()=>a(e))}return c(e).then(r=>r.isDirectory()?e:Promise.reject()).catch(()=>{throw t})});return a(r.resolve(e))})),module.exports.sync=((e,t)=>{o(e),t=Object.assign({},s,t);const i=e=>{try{t.fs.mkdirSync(e,t.mode)}catch(s){if("ENOENT"===s.code){if(s.message.includes("null bytes")||r.dirname(e)===e)throw s;return i(r.dirname(e)),i(e)}try{if(!t.fs.statSync(e).isDirectory())throw new Error("The path is not a directory")}catch(e){throw s}}return e};return i(r.resolve(e))});