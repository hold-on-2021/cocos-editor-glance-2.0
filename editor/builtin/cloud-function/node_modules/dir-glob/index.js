"use strict";const e=require("path"),t=require("path-type"),r=e=>e.length>1?`{${e.join(",")}}`:e[0],o=(t,r)=>{const o="!"===t[0]?t.slice(1):t;return e.isAbsolute(o)?o:e.join(r,o)},s=(t,o)=>{if(o.files&&!Array.isArray(o.files))throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof o.files}\``);if(o.extensions&&!Array.isArray(o.extensions))throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof o.extensions}\``);return o.files&&o.extensions?o.files.map(s=>e.posix.join(t,((t,o)=>e.extname(t)?`**/${t}`:`**/${t}.${r(o)}`)(s,o.extensions))):o.files?o.files.map(r=>e.posix.join(t,`**/${r}`)):o.extensions?[e.posix.join(t,`**/*.${r(o.extensions)}`)]:[e.posix.join(t,"**")]};module.exports=(async(e,r)=>{if("string"!=typeof(r={cwd:process.cwd(),...r}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof r.cwd}\``);const i=await Promise.all([].concat(e).map(async e=>{return await t.isDirectory(o(e,r.cwd))?s(e,r):e}));return[].concat.apply([],i)}),module.exports.sync=((e,r)=>{if("string"!=typeof(r={cwd:process.cwd(),...r}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof r.cwd}\``);const i=[].concat(e).map(e=>t.isDirectorySync(o(e,r.cwd))?s(e,r):e);return[].concat.apply([],i)});