module.exports={Verifier:a,Signer:o};var r=require("tweetnacl"),e=require("stream"),t=require("util"),i=require("assert-plus"),s=require("safer-buffer").Buffer,n=require("./signature");function a(r,t){if("sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=r,this.chunks=[],e.Writable.call(this,{})}function o(r,t){if("sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=r,this.chunks=[],e.Writable.call(this,{})}t.inherits(a,e.Writable),a.prototype._write=function(r,e,t){this.chunks.push(r),t()},a.prototype.update=function(r){"string"==typeof r&&(r=s.from(r,"binary")),this.chunks.push(r)},a.prototype.verify=function(e,t){var a;if(n.isSignature(e,[2,0])){if("ed25519"!==e.type)return!1;a=e.toBuffer("raw")}else if("string"==typeof e)a=s.from(e,"base64");else if(n.isSignature(e,[1,0]))throw new Error("signature was created by too old a version of sshpk and cannot be verified");return i.buffer(a),r.sign.detached.verify(new Uint8Array(s.concat(this.chunks)),new Uint8Array(a),new Uint8Array(this.key.part.A.data))},t.inherits(o,e.Writable),o.prototype._write=function(r,e,t){this.chunks.push(r),t()},o.prototype.update=function(r){"string"==typeof r&&(r=s.from(r,"binary")),this.chunks.push(r)},o.prototype.sign=function(){var e=r.sign.detached(new Uint8Array(s.concat(this.chunks)),new Uint8Array(s.concat([this.key.part.k.data,this.key.part.A.data]))),t=s.from(e),i=n.parse(t,"ed25519","raw");return i.hashAlgorithm="sha512",i};