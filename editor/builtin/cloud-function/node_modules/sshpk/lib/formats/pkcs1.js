module.exports={read:function(e,r){return d.read(e,r,"pkcs1")},readPkcs1:function(d,p,o){switch(d){case"RSA":if("public"===p)return function(e){var r=c(e,"modulus"),t=c(e,"exponent");return new i({type:"rsa",parts:[{name:"e",data:t},{name:"n",data:r}]})}(o);if("private"===p)return function(r){var t=c(r,"version");e.strictEqual(t[0],0);var a=c(r,"modulus"),n=c(r,"public exponent"),i=c(r,"private exponent"),d=c(r,"prime1"),f=c(r,"prime2"),p=c(r,"exponent1"),o=c(r,"exponent2"),s=c(r,"iqmp");return new u({type:"rsa",parts:[{name:"n",data:a},{name:"e",data:n},{name:"d",data:i},{name:"iqmp",data:s},{name:"p",data:d},{name:"q",data:f},{name:"dmodp",data:p},{name:"dmodq",data:o}]})}(o);throw new Error("Unknown key type: "+p);case"DSA":if("public"===p)return function(e){var r=c(e,"y"),t=c(e,"p"),a=c(e,"q"),n=c(e,"g");return new i({type:"dsa",parts:[{name:"y",data:r},{name:"p",data:t},{name:"q",data:a},{name:"g",data:n}]})}(o);if("private"===p)return function(r){var t=c(r,"version");e.strictEqual(t.readUInt8(0),0);var a=c(r,"p"),n=c(r,"q"),i=c(r,"g"),d=c(r,"y"),f=c(r,"x");return new u({type:"dsa",parts:[{name:"p",data:a},{name:"q",data:n},{name:"g",data:i},{name:"y",data:d},{name:"x",data:f}]})}(o);throw new Error("Unknown key type: "+p);case"EC":case"ECDSA":if("private"===p)return function(a){var i=c(a,"version");e.strictEqual(i.readUInt8(0),1);var d=a.readString(r.Ber.OctetString,!0);a.readSequence(160);var p=f(a);e.string(p,"a known elliptic curve"),a.readSequence(161);var o=a.readString(r.Ber.BitString,!0);o=n.ecNormalize(o);var s={type:"ecdsa",parts:[{name:"curve",data:t.from(p)},{name:"Q",data:o},{name:"d",data:d}]};return new u(s)}(o);if("public"===p)return function(u){u.readSequence();var d=u.readOID();e.strictEqual(d,"1.2.840.10045.2.1","must be ecPublicKey");for(var f,c=u.readOID(),p=Object.keys(a.curves),o=0;o<p.length;++o){var s=p[o],w=a.curves[s];if(w.pkcs8oid===c){f=s;break}}e.string(f,"a known ECDSA named curve");var B=u.readString(r.Ber.BitString,!0);B=n.ecNormalize(B);var g={type:"ecdsa",parts:[{name:"curve",data:t.from(f)},{name:"Q",data:B}]};return new i(g)}(o);throw new Error("Unknown key type: "+p);case"EDDSA":case"EdDSA":if("private"===p)return function(t){var a=c(t,"version");e.strictEqual(a.readUInt8(0),1);var i=t.readString(r.Ber.OctetString,!0);t.readSequence(160);var d=t.readOID();e.strictEqual(d,"1.3.101.112","the ed25519 curve identifier"),t.readSequence(161);var f=n.readBitString(t),p={type:"ed25519",parts:[{name:"A",data:n.zeroPadToLength(f,32)},{name:"k",data:i}]};return new u(p)}(o);throw new Error(p+" keys not supported with EdDSA");default:throw new Error("Unknown key algo: "+d)}},write:function(e,r){return d.write(e,r,"pkcs1")},writePkcs1:function(i,d){switch(i.startSequence(),d.type){case"rsa":u.isPrivateKey(d)?function(e,a){var i=t.from([0]);e.writeBuffer(i,r.Ber.Integer),e.writeBuffer(a.part.n.data,r.Ber.Integer),e.writeBuffer(a.part.e.data,r.Ber.Integer),e.writeBuffer(a.part.d.data,r.Ber.Integer),e.writeBuffer(a.part.p.data,r.Ber.Integer),e.writeBuffer(a.part.q.data,r.Ber.Integer),a.part.dmodp&&a.part.dmodq||n.addRSAMissing(a);e.writeBuffer(a.part.dmodp.data,r.Ber.Integer),e.writeBuffer(a.part.dmodq.data,r.Ber.Integer),e.writeBuffer(a.part.iqmp.data,r.Ber.Integer)}(i,d):function(e,t){e.writeBuffer(t.part.n.data,r.Ber.Integer),e.writeBuffer(t.part.e.data,r.Ber.Integer)}(i,d);break;case"dsa":u.isPrivateKey(d)?function(e,a){var n=t.from([0]);e.writeBuffer(n,r.Ber.Integer),e.writeBuffer(a.part.p.data,r.Ber.Integer),e.writeBuffer(a.part.q.data,r.Ber.Integer),e.writeBuffer(a.part.g.data,r.Ber.Integer),e.writeBuffer(a.part.y.data,r.Ber.Integer),e.writeBuffer(a.part.x.data,r.Ber.Integer)}(i,d):function(e,t){e.writeBuffer(t.part.y.data,r.Ber.Integer),e.writeBuffer(t.part.p.data,r.Ber.Integer),e.writeBuffer(t.part.q.data,r.Ber.Integer),e.writeBuffer(t.part.g.data,r.Ber.Integer)}(i,d);break;case"ecdsa":u.isPrivateKey(d)?function(i,u){var d=t.from([1]);i.writeBuffer(d,r.Ber.Integer),i.writeBuffer(u.part.d.data,r.Ber.OctetString),i.startSequence(160);var f=u.part.curve.data.toString(),c=a.curves[f].pkcs8oid;e.string(c,"a known ECDSA named curve"),i.writeOID(c),i.endSequence(),i.startSequence(161);var p=n.ecNormalize(u.part.Q.data,!0);i.writeBuffer(p,r.Ber.BitString),i.endSequence()}(i,d):function(t,i){t.startSequence(),t.writeOID("1.2.840.10045.2.1");var u=i.part.curve.data.toString(),d=a.curves[u].pkcs8oid;e.string(d,"a known ECDSA named curve"),t.writeOID(d),t.endSequence();var f=n.ecNormalize(i.part.Q.data,!0);t.writeBuffer(f,r.Ber.BitString)}(i,d);break;case"ed25519":u.isPrivateKey(d)?function(e,a){var i=t.from([1]);e.writeBuffer(i,r.Ber.Integer),e.writeBuffer(a.part.k.data,r.Ber.OctetString),e.startSequence(160),e.writeOID("1.3.101.112"),e.endSequence(),e.startSequence(161),n.writeBitString(e,a.part.A.data),e.endSequence()}(i,d):function(e,r){throw new Error("Public keys are not supported for EdDSA PKCS#1")}();break;default:throw new Error("Unknown key algo: "+d.type)}i.endSequence()}};var e=require("assert-plus"),r=require("asn1"),t=require("safer-buffer").Buffer,a=require("../algs"),n=require("../utils"),i=require("../key"),u=require("../private-key"),d=require("./pem"),f=require("./pkcs8").readECDSACurve;function c(t,a){return e.strictEqual(t.peek(),r.Ber.Integer,a+" is not an Integer"),n.mpNormalize(t.readString(r.Ber.Integer,!0))}