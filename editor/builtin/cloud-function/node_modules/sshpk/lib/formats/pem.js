module.exports={read:function(i,o,E){var v=i;"string"!=typeof i&&(e.buffer(i,"buf"),i=i.toString("ascii"));var y,P,k=i.trim().split(/[\r\n]+/g),q=-1;for(;!y&&q<k.length;)y=k[++q].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);e.ok(y,"invalid PEM header");var g=k.length;for(;!P&&g>0;)P=k[--g].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);e.ok(P,"invalid PEM footer"),e.equal(y[2],P[2]);var S,B=y[2].toLowerCase();y[1]&&(e.equal(y[1],P[1],"PEM header and footer mismatch"),S=y[1].trim());k=k.slice(q,g+1);var I,m,K,b={};for(;k=k.slice(1),y=k[0].match(/^([A-Za-z0-9-]+): (.+)$/);)b[y[1].toLowerCase()]=y[2];if(k=k.slice(0,-1).join(""),i=a.from(k,"base64"),b["proc-type"]){var C=b["proc-type"].split(",");if("4"===C[0]&&"ENCRYPTED"===C[1]){if("string"==typeof o.passphrase&&(o.passphrase=a.from(o.passphrase,"utf-8")),!a.isBuffer(o.passphrase))throw new u.KeyEncryptedError(o.filename,"PEM");C=b["dek-info"].split(","),e.ok(2===C.length),I=C[0].toLowerCase(),K=a.from(C[1],"hex"),m=s.opensslKeyDeriv(I,K,o.passphrase,1).key}}if(S&&"encrypted"===S.toLowerCase()){var D,A=new r.BerReader(i);A.readSequence(),A.readSequence(),D=A.offset+A.length;var L=A.readOID();if(L!==h)throw new Error("Unsupported PEM/PKCS8 encryption scheme: "+L);A.readSequence(),A.readSequence();var O=A.offset+A.length,R=A.readOID();if(R!==d)throw new Error("Unsupported PBES2 KDF: "+R);A.readSequence();var U=A.readString(r.Ber.OctetString,!0),Y=A.readInt(),M="sha1";if(A.offset<O){A.readSequence();var N=A.readOID();if(void 0===(M=w[N]))throw new Error("Unsupported PBKDF2 hash: "+N)}A._offset=O,A.readSequence();var T=A.readOID();if(void 0===(I=l[T]))throw new Error("Unsupported PBES2 cipher: "+T);if(K=A.readString(r.Ber.OctetString,!0),A._offset=D,i=A.readString(r.Ber.OctetString,!0),"string"==typeof o.passphrase&&(o.passphrase=a.from(o.passphrase,"utf-8")),!a.isBuffer(o.passphrase))throw new u.KeyEncryptedError(o.filename,"PEM");var Z=s.opensshCipherInfo(I);I=Z.opensslName,m=s.pbkdf2(M,U,Y,Z.keySize,o.passphrase),S=void 0}if(I&&m&&K){var j,z=t.createDecipheriv(I,m,K),V=[];for(z.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),z.write(i),z.end();null!==(j=z.read());)V.push(j);i=a.concat(V)}if(S&&"openssh"===S.toLowerCase())return p.readSSHPrivate(B,i,o);if(S&&"ssh2"===S.toLowerCase())return f.readType(B,i,o);var x=new r.BerReader(i);return x.originalInput=v,x.readSequence(),S?(E&&e.strictEqual(E,"pkcs1"),n.readPkcs1(S,B,x)):(E&&e.strictEqual(E,"pkcs8"),c.readPkcs8(S,B,x))},write:function(t,s,p){e.object(t);var f,u={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[t.type],h=new r.BerWriter;if(o.isPrivateKey(t))p&&"pkcs8"===p?(f="PRIVATE KEY",c.writePkcs8(h,t)):(p&&e.strictEqual(p,"pkcs1"),f=u+" PRIVATE KEY",n.writePkcs1(h,t));else{if(!i.isKey(t))throw new Error("key is not a Key or PrivateKey");p&&"pkcs1"===p?(f=u+" PUBLIC KEY",n.writePkcs1(h,t)):(p&&e.strictEqual(p,"pkcs8"),f="PUBLIC KEY",c.writePkcs8(h,t))}var d=h.buffer.toString("base64"),l=d.length+d.length/64+18+16+2*f.length+10,E=a.alloc(l),w=0;w+=E.write("-----BEGIN "+f+"-----\n",w);for(var v=0;v<d.length;){var y=v+64;y>d.length&&(y=d.length),w+=E.write(d.slice(v,y),w),E[w++]=10,v=y}return w+=E.write("-----END "+f+"-----\n",w),E.slice(0,w)}};var e=require("assert-plus"),r=require("asn1"),t=require("crypto"),a=require("safer-buffer").Buffer,s=(require("../algs"),require("../utils")),i=require("../key"),o=require("../private-key"),n=require("./pkcs1"),c=require("./pkcs8"),p=require("./ssh-private"),f=require("./rfc4253"),u=require("../errors"),h="1.2.840.113549.1.5.13",d="1.2.840.113549.1.5.12",l={"1.2.840.113549.3.7":"3des-cbc","2.16.840.1.101.3.4.1.2":"aes128-cbc","2.16.840.1.101.3.4.1.42":"aes256-cbc"},E={};Object.keys(l).forEach(function(e){E[l[e]]=e});var w={"1.2.840.113549.2.7":"sha1","1.2.840.113549.2.9":"sha256","1.2.840.113549.2.11":"sha512"},v={};Object.keys(w).forEach(function(e){v[w[e]]=e});