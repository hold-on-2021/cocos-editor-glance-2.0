module.exports={read:function(e,r){return o.read(e,r)},readSSHPrivate:function(a,o,c){var d=(o=new f({buffer:o})).readCString();r.strictEqual(d,u,"bad magic string");var l=o.readString(),w=o.readString(),h=o.readBuffer();if(1!==o.readInt())throw new Error("OpenSSH-format key file contains multiple keys: this is unsupported.");var y=o.readBuffer();if("public"===a)return r.ok(o.atEnd(),"excess bytes left after key"),s.read(y);var v=o.readBuffer();r.ok(o.atEnd(),"excess bytes left after key");var k=new f({buffer:h});switch(w){case"none":if("none"!==l)throw new Error('OpenSSH-format key uses KDF "none" but specifies a cipher other than "none"');break;case"bcrypt":var S=k.readBuffer(),b=k.readInt(),g=n.opensshCipherInfo(l);if(void 0===e&&(e=require("bcrypt-pbkdf")),"string"==typeof c.passphrase&&(c.passphrase=t.from(c.passphrase,"utf-8")),!t.isBuffer(c.passphrase))throw new p.KeyEncryptedError(c.filename,"OpenSSH");var m=new Uint8Array(c.passphrase),E=new Uint8Array(S),B=new Uint8Array(g.keySize+g.blockSize),I=e.pbkdf(m,m.length,E,E.length,B,B.length,b);if(0!==I)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var q=(B=t.from(B)).slice(0,g.keySize),z=B.slice(g.keySize,g.keySize+g.blockSize),P=i.createDecipheriv(g.opensslName,q,z);P.setAutoPadding(!1);var A,U=[];for(P.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),P.write(v),P.end();null!==(A=P.read());)U.push(A);v=t.concat(U);break;default:throw new Error('OpenSSH-format key uses unknown KDF "'+w+'"')}var K=(o=new f({buffer:v})).readInt(),C=o.readInt();if(K!==C)throw new Error("Incorrect passphrase supplied, could not decrypt key");var H={},O=s.readInternal(H,"private",o.remainder());o.skip(H.consumed);var N=o.readString();return O.comment=N,O},write:function(o,s){var p;p=a.isPrivateKey(o)?o.toPublic():o;var c,d,l="none",w="none",h=t.alloc(0),y={blockSize:8};void 0!==s&&("string"==typeof(c=s.passphrase)&&(c=t.from(c,"utf-8")),void 0!==c&&(r.buffer(c,"options.passphrase"),r.optionalString(s.cipher,"options.cipher"),void 0===(l=s.cipher)&&(l="aes128-ctr"),y=n.opensshCipherInfo(l),w="bcrypt"));if(a.isPrivateKey(o)){d=new f({});var v=i.randomBytes(4).readUInt32BE(0);d.writeInt(v),d.writeInt(v),d.write(o.toBuffer("rfc4253")),d.writeString(o.comment||"");for(var k=1;d._offset%y.blockSize!=0;)d.writeChar(k++);d=d.toBuffer()}switch(w){case"none":break;case"bcrypt":var S=i.randomBytes(16),b=new f({});b.writeBuffer(S),b.writeInt(16),h=b.toBuffer(),void 0===e&&(e=require("bcrypt-pbkdf"));var g=new Uint8Array(c),m=new Uint8Array(S),E=new Uint8Array(y.keySize+y.blockSize),B=e.pbkdf(g,g.length,m,m.length,E,E.length,16);if(0!==B)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var I=(E=t.from(E)).slice(0,y.keySize),q=E.slice(y.keySize,y.keySize+y.blockSize),z=i.createCipheriv(y.opensslName,I,q);z.setAutoPadding(!1);var P,A=[];for(z.once("error",function(e){throw e}),z.write(d),z.end();null!==(P=z.read());)A.push(P);d=t.concat(A);break;default:throw new Error("Unsupported kdf "+w)}var U,K=new f({});K.writeCString(u),K.writeString(l),K.writeString(w),K.writeBuffer(h),K.writeInt(1),K.writeBuffer(p.toBuffer("rfc4253")),d&&K.writeBuffer(d);K=K.toBuffer(),U=a.isPrivateKey(o)?"OPENSSH PRIVATE KEY":"OPENSSH PUBLIC KEY";var C=K.toString("base64"),H=C.length+C.length/70+18+16+2*U.length+10;K=t.alloc(H);var O=0;O+=K.write("-----BEGIN "+U+"-----\n",O);for(var N=0;N<C.length;){var x=N+70;x>C.length&&(x=C.length),O+=K.write(C.slice(N,x),O),K[O++]=10,N=x}return O+=K.write("-----END "+U+"-----\n",O),K.slice(0,O)}};var e,r=require("assert-plus"),t=(require("asn1"),require("safer-buffer").Buffer),n=(require("../algs"),require("../utils")),i=require("crypto"),a=(require("../key"),require("../private-key")),o=require("./pem"),s=require("./rfc4253"),f=require("../ssh-buffer"),p=require("../errors");var u="openssh-key-v1";