module.exports=o;var r=require("assert-plus"),t=require("safer-buffer").Buffer,e=(require("./algs"),require("crypto"),require("./errors")),a=require("./utils"),s=require("asn1"),i=require("./ssh-buffer"),n=e.InvalidAlgorithmError,h=e.SignatureParseError;function o(t){r.object(t,"options"),r.arrayOfObject(t.parts,"options.parts"),r.string(t.type,"options.type");for(var e={},a=0;a<t.parts.length;++a){var s=t.parts[a];e[s.name]=s}this.type=t.type,this.hashAlgorithm=t.hashAlgo,this.curve=t.curve,this.parts=t.parts,this.part=e}function u(t,e,a,s){if("ssh"===a){try{var n=new i({buffer:t}),h=n.readString()}catch(r){}if(void 0!==n){var u="SSH signature does not match expected type (expected "+e+", got "+h+")";switch(h){case"ssh-rsa":r.strictEqual(e,"rsa",u),s.hashAlgo="sha1";break;case"rsa-sha2-256":r.strictEqual(e,"rsa",u),s.hashAlgo="sha256";break;case"rsa-sha2-512":r.strictEqual(e,"rsa",u),s.hashAlgo="sha512";break;case"ssh-ed25519":r.strictEqual(e,"ed25519",u),s.hashAlgo="sha512";break;default:throw new Error("Unknown SSH signature type: "+h)}var f=n.readPart();return r.ok(n.atEnd(),"extra trailing bytes"),f.name="sig",s.parts.push(f),new o(s)}}return s.parts.push({name:"sig",data:t}),new o(s)}o.prototype.toBuffer=function(e){var n;void 0===e&&(e="asn1"),r.string(e,"format");var h="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":h="rsa-sha2-256";break;case"sha512":h="rsa-sha2-512";break;case"sha1":case void 0:break;default:throw new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm)}return"ssh"===e?((n=new i({})).writeString(h),n.writePart(this.part.sig),n.toBuffer()):this.part.sig.data;case"ed25519":return"ssh"===e?((n=new i({})).writeString(h),n.writePart(this.part.sig),n.toBuffer()):this.part.sig.data;case"dsa":case"ecdsa":var o,u;if("asn1"===e){var f=new s.BerWriter;return f.startSequence(),o=a.mpNormalize(this.part.r.data),u=a.mpNormalize(this.part.s.data),f.writeBuffer(o,s.Ber.Integer),f.writeBuffer(u,s.Ber.Integer),f.endSequence(),f.buffer}if("ssh"===e&&"dsa"===this.type){if((n=new i({})).writeString("ssh-dss"),(o=this.part.r.data).length>20&&0===o[0]&&(o=o.slice(1)),(u=this.part.s.data).length>20&&0===u[0]&&(u=u.slice(1)),this.hashAlgorithm&&"sha1"!==this.hashAlgorithm||o.length+u.length!==40)throw new Error("OpenSSH only supports DSA signatures with SHA1 hash");return n.writeBuffer(t.concat([o,u])),n.toBuffer()}if("ssh"===e&&"ecdsa"===this.type){var p,c=new i({});o=this.part.r.data,c.writeBuffer(o),c.writePart(this.part.s),n=new i({}),0===o[0]&&(o=o.slice(1));var g=8*o.length;return 256===g?p="nistp256":384===g?p="nistp384":528===g&&(p="nistp521"),n.writeString("ecdsa-sha2-"+p),n.writeBuffer(c.toBuffer()),n.toBuffer()}throw new Error("Invalid signature format");default:throw new Error("Invalid signature data")}},o.prototype.toString=function(t){return r.optionalString(t,"format"),this.toBuffer(t).toString("base64")},o.parse=function(e,f,p){"string"==typeof e&&(e=t.from(e,"base64")),r.buffer(e,"data"),r.string(p,"format"),r.string(f,"type");var c={};c.type=f.toLowerCase(),c.parts=[];try{switch(r.ok(e.length>0,"signature must not be empty"),c.type){case"rsa":case"ed25519":return u(e,f,p,c);case"dsa":case"ecdsa":return"asn1"===p?function(r,t,e,i){var n=new s.BerReader(r);n.readSequence();var h=n.readString(s.Ber.Integer,!0),u=n.readString(s.Ber.Integer,!0);return i.parts.push({name:"r",data:a.mpNormalize(h)}),i.parts.push({name:"s",data:a.mpNormalize(u)}),new o(i)}(e,0,0,c):"dsa"===c.type?function(t,e,a,s){if(40!=t.length){var n=new i({buffer:t}),h=n.readBuffer();"ssh-dss"===h.toString("ascii")&&(h=n.readBuffer()),r.ok(n.atEnd(),"extra trailing bytes"),r.strictEqual(h.length,40,"invalid inner length"),t=h}return s.parts.push({name:"r",data:t.slice(0,20)}),s.parts.push({name:"s",data:t.slice(20,40)}),new o(s)}(e,0,0,c):function(t,e,a,s){var n,h,u=new i({buffer:t}),f=u.readBuffer(),p=f.toString("ascii");if("ecdsa-"===p.slice(0,6)){var c=p.split("-");switch(r.strictEqual(c[0],"ecdsa"),r.strictEqual(c[1],"sha2"),s.curve=c[2],s.curve){case"nistp256":s.hashAlgo="sha256";break;case"nistp384":s.hashAlgo="sha384";break;case"nistp521":s.hashAlgo="sha512";break;default:throw new Error("Unsupported ECDSA curve: "+s.curve)}f=u.readBuffer(),r.ok(u.atEnd(),"extra trailing bytes on outer"),u=new i({buffer:f}),n=u.readPart()}else n={data:f};return h=u.readPart(),r.ok(u.atEnd(),"extra trailing bytes"),n.name="r",h.name="s",s.parts.push(n),s.parts.push(h),new o(s)}(e,0,0,c);default:throw new n(f)}}catch(r){if(r instanceof n)throw r;throw new h(f,p,r)}},o.isSignature=function(r,t){return a.isCompatible(r,o,t)},o.prototype._sshpkApiVersion=[2,1],o._oldVersionDetect=function(t){return r.func(t.toBuffer),t.hasOwnProperty("hashAlgorithm")?[2,0]:[1,0]};