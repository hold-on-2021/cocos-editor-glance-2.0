"use strict";module.exports=function(a,e,r){var t=" ",s=a.level,l=a.dataLevel,o=a.schema[e],h=a.schemaPath+a.util.getProperty(e),d=a.errSchemaPath+"/"+e,i=!a.opts.allErrors,m="data"+(l||""),u="valid"+s,c=a.opts.$data&&o&&o.$data;c?(t+=" var schema"+s+" = "+a.util.getData(o.$data,l,a.dataPathArr)+"; ","schema"+s):o;var v="i"+s,n="schema"+s;c||(t+=" var "+n+" = validate.schema"+h+";"),t+="var "+u+";",c&&(t+=" if (schema"+s+" === undefined) "+u+" = true; else if (!Array.isArray(schema"+s+")) "+u+" = false; else {"),t+=u+" = false;for (var "+v+"=0; "+v+"<"+n+".length; "+v+"++) if (equal("+m+", "+n+"["+v+"])) { "+u+" = true; break; }",c&&(t+="  }  "),t+=" if (!"+u+") {   ";var p=p||[];p.push(t),t="",!1!==a.createErrors?(t+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+a.errorPath+" , schemaPath: "+a.util.toQuotedString(d)+" , params: { allowedValues: schema"+s+" } ",!1!==a.opts.messages&&(t+=" , message: 'should be equal to one of the allowed values' "),a.opts.verbose&&(t+=" , schema: validate.schema"+h+" , parentSchema: validate.schema"+a.schemaPath+" , data: "+m+" "),t+=" } "):t+=" {} ";var f=t;return t=p.pop(),!a.compositeRule&&i?a.async?t+=" throw new ValidationError(["+f+"]); ":t+=" validate.errors = ["+f+"]; return false; ":t+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",t+=" }",i&&(t+=" else { "),t};