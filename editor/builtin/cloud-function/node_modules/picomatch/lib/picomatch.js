"use strict";const t=require("path"),e=require("./scan"),n=require("./parse"),r=require("./utils"),o=require("./constants"),s=(t,e,n=!1)=>{if(Array.isArray(t)){const r=t.map(t=>s(t,e,n));return t=>{for(const e of r){const n=e(t);if(n)return n}return!1}}const o=(t=>t&&"object"==typeof t&&!Array.isArray(t))(t)&&t.tokens&&t.input;if(""===t||"string"!=typeof t&&!o)throw new TypeError("Expected pattern to be a non-empty string");const a=e||{},i=r.isWindows(e),c=o?s.compileRe(t,e):s.makeRe(t,e,!1,!0),u=c.state;delete c.state;let p=()=>!1;if(a.ignore){const t={...e,ignore:null,onMatch:null,onResult:null};p=s(a.ignore,t,n)}const f=(n,r=!1)=>{const{isMatch:o,match:f,output:h}=s.test(n,c,e,{glob:t,posix:i}),l={glob:t,state:u,regex:c,posix:i,input:n,output:h,match:f,isMatch:o};return"function"==typeof a.onResult&&a.onResult(l),!1===o?(l.isMatch=!1,!!r&&l):p(n)?("function"==typeof a.onIgnore&&a.onIgnore(l),l.isMatch=!1,!!r&&l):("function"==typeof a.onMatch&&a.onMatch(l),!r||l)};return n&&(f.state=u),f};s.test=((t,e,n,{glob:o,posix:a}={})=>{if("string"!=typeof t)throw new TypeError("Expected input to be a string");if(""===t)return{isMatch:!1,output:""};const i=n||{},c=i.format||(a?r.toPosixSlashes:null);let u=t===o,p=u&&c?c(t):t;return!1===u&&(u=(p=c?c(t):t)===o),!1!==u&&!0!==i.capture||(u=!0===i.matchBase||!0===i.basename?s.matchBase(t,e,n,a):e.exec(p)),{isMatch:Boolean(u),match:u,output:p}}),s.matchBase=((e,n,o,a=r.isWindows(o))=>{return(n instanceof RegExp?n:s.makeRe(n,o)).test(t.basename(e))}),s.isMatch=((t,e,n)=>s(e,n)(t)),s.parse=((t,e)=>Array.isArray(t)?t.map(t=>s.parse(t,e)):n(t,{...e,fastpaths:!1})),s.scan=((t,n)=>e(t,n)),s.compileRe=((t,e,n=!1,r=!1)=>{if(!0===n)return t.output;const o=e||{},a=o.contains?"":"^",i=o.contains?"":"$";let c=`${a}(?:${t.output})${i}`;t&&!0===t.negated&&(c=`^(?!${c}).*$`);const u=s.toRegex(c,e);return!0===r&&(u.state=t),u}),s.makeRe=((t,e,r=!1,o=!1)=>{if(!t||"string"!=typeof t)throw new TypeError("Expected a non-empty string");const a=e||{};let i,c={negated:!1,fastpaths:!0},u="";return t.startsWith("./")&&(t=t.slice(2),u=c.prefix="./"),!1===a.fastpaths||"."!==t[0]&&"*"!==t[0]||(i=n.fastpaths(t,e)),void 0===i?(c=n(t,e)).prefix=u+(c.prefix||""):c.output=i,s.compileRe(c,e,r,o)}),s.toRegex=((t,e)=>{try{const n=e||{};return new RegExp(t,n.flags||(n.nocase?"i":""))}catch(t){if(e&&!0===e.debug)throw t;return/$^/}}),s.constants=o,module.exports=s;