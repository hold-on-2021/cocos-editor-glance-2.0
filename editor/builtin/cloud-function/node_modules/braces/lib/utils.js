"use strict";exports.isInteger=(e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e))),exports.find=((e,t)=>e.nodes.find(e=>e.type===t)),exports.exceedsLimit=((e,t,r=1,s)=>!1!==s&&(!(!exports.isInteger(e)||!exports.isInteger(t))&&(Number(t)-Number(e))/Number(r)>=s)),exports.escapeNode=((e,t=0,r)=>{let s=e.nodes[t];s&&(r&&s.type===r||"open"===s.type||"close"===s.type)&&!0!==s.escaped&&(s.value="\\"+s.value,s.escaped=!0)}),exports.encloseBrace=(e=>"brace"===e.type&&(e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0))),exports.isInvalidBrace=(e=>"brace"===e.type&&(!(!0!==e.invalid&&!e.dollar)||(e.commas>>0+e.ranges>>0==0?(e.invalid=!0,!0):(!0!==e.open||!0!==e.close)&&(e.invalid=!0,!0)))),exports.isOpenOrClose=(e=>"open"===e.type||"close"===e.type||(!0===e.open||!0===e.close)),exports.reduce=(e=>e.reduce((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e),[])),exports.flatten=((...e)=>{const t=[],r=e=>{for(let s=0;s<e.length;s++){let p=e[s];Array.isArray(p)?r(p,t):void 0!==p&&t.push(p)}return t};return r(e),t});