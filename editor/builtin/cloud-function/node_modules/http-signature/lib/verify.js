var r=require("assert-plus"),e=require("crypto"),t=require("sshpk"),a=require("./utils"),i=(a.HASH_ALGOS,a.PK_ALGOS,a.InvalidAlgorithmError,a.HttpSignatureError,a.validateAlgorithm);module.exports={verifySignature:function(e,a){r.object(e,"parsedSignature"),("string"==typeof a||Buffer.isBuffer(a))&&(a=t.parseKey(a)),r.ok(t.Key.isKey(a,[1,1]),"pubkey must be a sshpk.Key");var s=i(e.algorithm);if("hmac"===s[0]||s[0]!==a.type)return!1;var u=a.createVerify(s[1]);return u.update(e.signingString),u.verify(e.params.signature,"base64")},verifyHMAC:function(t,a){r.object(t,"parsedHMAC"),r.string(a,"secret");var s=i(t.algorithm);if("hmac"!==s[0])return!1;var u=s[1].toUpperCase(),n=e.createHmac(u,a);n.update(t.signingString);var g=e.createHmac(u,a);g.update(n.digest()),g=g.digest();var p=e.createHmac(u,a);return p.update(new Buffer(t.params.signature,"base64")),p=p.digest(),"string"==typeof g?g===p:Buffer.isBuffer(g)&&!g.equals?g.toString("binary")===p.toString("binary"):g.equals(p)}};