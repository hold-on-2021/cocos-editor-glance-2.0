"use strict";const e=require("stream").PassThrough,n=Array.prototype.slice;function r(n,t){if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++)n[e]=r(n[e],t);else{if(!n._readableState&&n.pipe&&(n=n.pipe(e(t))),!n._readableState||!n.pause||!n.pipe)throw new Error("Only readable stream can be merged.");n.pause()}return n}module.exports=function(){const t=[];let i=!1;const o=n.call(arguments);let a=o[o.length-1];a&&!Array.isArray(a)&&null==a.pipe?o.pop():a={};const l=!1!==a.end;null==a.objectMode&&(a.objectMode=!0);null==a.highWaterMark&&(a.highWaterMark=65536);const u=e(a);function s(){for(let e=0,n=arguments.length;e<n;e++)t.push(r(arguments[e],a));return function e(){if(i)return;i=!0;let n=t.shift();if(!n)return process.nextTick(p),void 0;Array.isArray(n)||(n=[n]);let r=n.length+1;function o(){--r>0||(i=!1,e())}function a(e){function n(){e.removeListener("merge2UnpipeEnd",n),e.removeListener("end",n),o()}if(e._readableState.endEmitted)return o();e.on("merge2UnpipeEnd",n),e.on("end",n),e.pipe(u,{end:!1}),e.resume()}for(let e=0;e<n.length;e++)a(n[e]);o()}(),this}function p(){return i=!1,u.emit("queueDrain"),l&&u.end()}u.setMaxListeners(0),u.add=s,u.on("unpipe",function(e){e.emit("merge2UnpipeEnd")}),o.length&&s.apply(null,o);return u};