const e=require("fire-path"),t=require("fire-fs"),r=require("lodash"),a=require("globby"),i=require("del"),s=require("./packer"),n=Editor.require("app://editor/page/build/texture-compress");async function o(a,i,s){let n=e.join(a,"info.json"),o={};t.existsSync(n)&&(o=t.readJSONSync(n))&&o.projectPath!==Editor.remote.Project.path&&(o={});let u={projectPath:Editor.remote.Project.path,mtimes:{}},l=[i.meta.uuid];return s.forEach(e=>{l.push(e._uuid),l.push(e.getTexture()._uuid)}),l=r.uniq(l),await Promise.all(l.map(async e=>{let t=await new Promise((t,r)=>{Editor.assetdb.queryMetaInfoByUuid(e,(e,a)=>{if(e)return r(e);t({assetMtime:a.assetMtime,metaMtime:a.metaMtime})})});u.mtimes[e]=t})),{storedPacInfoPath:n,newStoredPacInfo:u,storedPacInfo:o}}exports.queryAtlases=async function(i){let s={textureUuids:[],spriteFrames:[],pacInfos:[],texture2pac:{}};return i=Array.isArray(i)?i:[i],await Promise.all(i.map(async i=>{let n=await(new class{async init(i){let s,n=i.path,o=n+".meta",u=t.readJSONSync(o),l=e.dirname(i.url)+"/**/*",m=await new Promise((e,t)=>{Editor.assetdb.queryAssets(l,["sprite-frame"],(r,a)=>{if(r)return t(r);e(a)})}),c=e.dirname(n),d=[e.join(c,"**/*.pac"),"!"+e.join(c,"*.pac")],p=await new Promise((t,r)=>{a(d,(a,i)=>{if(a)return r(a);t(i.map(t=>e.dirname(t)))})});0===(m=m.filter(t=>{for(let r=0;r<p.length;r++)if(e.contains(p[r],t.path))return!1;return!0})).length?(s=[],Editor.warn(`No SpriteFrame find in folder [${e.dirname(i.url)}]. Please check the AutoAtlas [${n}].`)):(s=await Promise.all(m.map(async e=>new Promise((t,r)=>{cc.AssetLibrary.loadAsset(e.uuid,(e,a)=>{if(e)return r(e);a.pacInfo=this,t(a)})}))),s=r.sortBy(s,"_uuid"));let f=Editor.url("db://assets");return this.meta=u,this.info=i,this.spriteFrames=s,this.relativePath=e.relative(f,n),this.relativeDir=e.relative(f,e.dirname(n)),this}}).init(i);n.spriteFrames.forEach(e=>{let t=e.getTexture()._uuid;s.textureUuids.push(t),s.texture2pac[t]=n}),s.spriteFrames=s.spriteFrames.concat(n.spriteFrames),s.pacInfos.push(n)})),s.textureUuids=r.uniq(s.textureUuids),s.spriteFrames=r.uniq(s.spriteFrames),s},exports.pack=async function(a){let{pacInfos:u,buildAssets:l,dest:m,needCompress:c,actualPlatform:d}=a,p=[];for(let a=0;a<u.length;a++){let f=u[a],h=f.meta,P=cc.js.mixin({name:e.basenameNoExt(f.info.path),width:h.maxWidth,height:h.maxHeight},h),w=f.spriteFrames;if(h.filterUnused&&l){let t=Editor.url("db://assets/resources");e.contains(t,f.info.path)?Editor.warn(`AutoAtlas "${f.info.path}" is in resources dir, so its "Filter Unused Resources" parameter will be ignored.`):f.meta.uuid in l&&Editor.warn(`AutoAtlas "${f.info.path}" has been referenced directly, so its "Filter Unused Resources" parameter will be ignored.`)}let y,g=e.join(m,f.relativePath),{storedPacInfoPath:x,newStoredPacInfo:E,storedPacInfo:b}=await o(g,f,w);!r.isEqual(E.mtimes,b.mtimes)?(i.sync(g,{force:!0}),y=await new Promise((e,t)=>{s(w,P,(r,a)=>{if(r)return t(r);e(a)})}),await Promise.all(y.atlases.map(async r=>{let a=e.join(g,r.name+".png");return t.ensureDirSync(e.dirname(a)),r.imagePath=a,new Promise((e,t)=>{r.sharp.toFile(a,r=>{if(r)return t(r);e()})})})),global.gc&&global.gc(),c&&await Promise.all(y.atlases.map(async r=>{let a=e.join(g,"compressed",r.name+".png");t.ensureDirSync(e.dirname(a));let i=await new Promise((e,t)=>{n({src:r.imagePath,dst:a,actualPlatform:d,compressOption:f.meta.platformSettings},(r,a)=>{if(r)return t(r);e(a)})});0===i.length&&(i=[".png"]),r.compressd={suffix:i,imagePathNoExt:e.join(e.dirname(a),e.basenameNoExt(a))}})),E.result=y,t.ensureDirSync(g),t.writeFileSync(x,JSON.stringify(E,null,2))):(y=b.result).atlases.forEach(e=>{e.files.forEach(e=>{e.spriteFrame=w.find(t=>t._uuid===e.uuid)})}),y.pacInfo=f,p.push(y)}return p};