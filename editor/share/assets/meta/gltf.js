"use strict";const e=require("fire-fs"),t=require("fire-path"),a=require("./mesh"),s=require("./prefab"),i=require("./skeleton-animation-clip"),r=require("./skeleton"),n=(require("./buffer"),require("./material")),{promisify:o}=require("util"),l=Editor.require("app://editor/core/common-asset-worker"),u=e.readJsonSync(Editor.url("unpack://static/default-assets/prefab/sprite.prefab"));function h(e,t){let a=e,s=0;for(;t[a];)a=`${e}_${++s}`;return t[a]=!0,a}module.exports=class extends Editor.metas.asset{constructor(e){super(e),this.scaleFactor=1,this.boneCount=0,this.precomputeJointMatrix=!1,this.animationFrameRate=30,this._gltf={},this._bufferUuids=[],this._buffers=[],this._modelName=""}static version(){return"1.0.15"}static defaultType(){return"gltf"}deserialize(e){super.deserialize(e);let a={};for(let s in e.subMetas){let i=e.subMetas[s],r=t.extname(s),n=this._assetdb._extname2infos[r];if(!n)continue;let o=n[0].ctor;if(!o){Editor.warn(`Can not find meta class for submeta ${s}`);continue}let l=new o(this._assetdb);l.deserialize(i),a[s]=l}this.updateSubMetas(a)}async _createMeshMeta(e,t,s){let i=Object.create(null),r=this._meshIDs=[],n=e.meshes||[];for(let o=0;o<n.length;o++){let l,u=h(n[o].name,i)+".mesh";l=t[u]?t[u]:new a(this._assetdb),r[o]=l.uuid,await l.importGltf(e,this._buffers,o),s[u]=l}}async _createSkeletonMeta(e,t,a){let s=this._skeletonIDs=[],i=e.skins||[];for(let n=0;n<i.length;n++){let i,o=`${this._modelName}-${n}.skeleton`;i=t[o]?t[o]:new r(this._assetdb),s[n]=i.uuid,await i.importGltf(e,this.uuid,n),a[o]=i}}async _createSkeletonAnimationMeta(e,t,a){let s=e.animations||[];for(let e=0;e<s.length;e++){let r,n=s[e].name;-1!==this._modelName.indexOf("@")&&(n=this._modelName.split("@")[1],0!==e&&(n+="_"+e));let o=n+".sac";(r=t[o]?t[o]:new i(this._assetdb)).name=n,r.modelUuid=this.uuid,r.animationID=e,r.animationFrameRate=this.animationFrameRate,await r.importGltf(this._gltf,this._buffers),a[o]=r}}_createPrefabMeta(e,t,a){let i=this._modelName+".prefab";t[i]?a[i]=t[i]:a[i]=new s(this._assetdb),a[i].content=u,a[i].readonly=!0}_createMaterialMeta(e,t,a){let s=this._materiaIDs=[],i=this._materialMetas=[],r=Object.create(null),o=e.materials||[];for(let e=0;e<o.length;e++){let l,u=h(o[e].name,r)+".mtl";l=t[u]?t[u]:new n(this._assetdb),s[e]=l.uuid,i[e]=l,a[u]=l}}_createBufferMeta(){}async _createSubMetas(){let e=this.getSubMetas(),t={},a=this._gltf;await this._createBufferMeta(a,e,t),await this._updateGltfNode(),await this._createMeshMeta(a,e,t),await this._createSkeletonMeta(a,e,t),await this._createSkeletonAnimationMeta(a,e,t),await this._createPrefabMeta(a,e,t),await this._createMaterialMeta(a,e,t),this.updateSubMetas(t)}async _updateGltfNode(){const e=1e-4;let t=this._gltf,a=t.nodes;for(let e=0;e<a.length;e++){let t=a[e];t.position=t.translation,t.quat=t.rotation,delete t.translation,delete t.rotation,t.name||(t.name=`${e}`);let s=t.children;if(s)for(let e=0;e<s.length;e++)a[s[e]].parent=(()=>t)}(function e(t){t.path="";let s=t.parent?t.parent():null;s&&(t.path=t.name,s.path&&(t.path=s.path+"/"+t.path));let i=t.children;if(i)for(let t=0;t<i.length;t++)e(a[i[t]])})(a[0]),this.boneCount=0;let s=t.skins||[],i=this._buffers;for(let e=0;e<s.length;e++){let a=t.skins[e],s=t.accessors[a.inverseBindMatrices],r=t.bufferViews[s.bufferView],n=i[r.buffer].buffer,o=new Float32Array(n,r.byteOffset+s.byteOffset,16*s.count),l=t.nodes,u=a.joints;for(let t=0;t<s.count;++t){let a=l[u[t]],s=[];for(let e=0;e<16;e++)s[e]=o[16*t+e];a.bindpose||(a.bindpose={},this.boneCount++),a.bindpose[e]=s}}function r(t,a){for(let s=0;s<t.length;s++)if(Math.abs(t[s]-a[s])>e)return!1;return!0}for(let e=0;e<a.length;e++){let t=a[e],s=t.bindpose;if(!s)continue;let i=!0,n=null;for(let e in s)if(n){if(!r(n,s[e])){i=!1;break}}else n=s[e];i?(t.uniqueBindPose=n,delete t.bindpose):this.precomputeJointMatrix&&Editor.warn(`Node (${t.path}) has different bindposes, precomputeJointMatrix will not work with best performance.`)}}async importModel(a){const s=e.readJsonSync(a);this._gltf=s,s.buffers&&(this._bufferUuids=[],this._buffers=[],await Promise.all(s.buffers.map(async s=>{const i=t.resolve(t.dirname(a),s.uri),r=this._assetdb.fspathToUuid(i);let n=await o(e.readFile)(i);this._buffers.push(new Uint8Array(n.buffer)),this._bufferUuids.push(r)})))}async import(e,a){this._modelName=t.basenameNoExt(e);try{await this.importModel(e)}catch(e){return a()}if(!this._gltf)return a();await this._createSubMetas();let s=new(Editor.require("unpack://engine-dev/cocos2d/core/3d/CCModel"));s.name=this._modelName,s._nodes=this._gltf.nodes,s._precomputeJointMatrix=this.precomputeJointMatrix,this._assetdb.saveAssetToLibrary(this.uuid,s),a()}async postImport(e,a){let s=this.getSubMetas();for(let e in s)s[e].name=e;let i={gltf:this._gltf,meshIDs:this._meshIDs,skeletonIDs:this._skeletonIDs,materiaIDs:this._materiaIDs,modelUuid:this.uuid,modelName:this._modelName,modelPath:e,scaleFactor:this.scaleFactor},{nodeMap:r,materials:n}=await l.start(Editor.url("app://editor/page/worker/create-model-prefab.js"),i),o=this._modelName+".prefab";try{let a=JSON.parse(r[this._modelName]);s[o].importJSON(t.join(e,o),a)}catch(e){Editor.error(e)}let u=this._materialMetas;for(let a=0;a<u.length;a++){let s=u[a];s.dataAsSubAsset||s.importJSON(t.join(e,s.name),n[a])}this.updateSubMetas(s),a()}};