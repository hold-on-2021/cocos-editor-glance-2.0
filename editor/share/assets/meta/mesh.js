"use strict";const e=require("fire-fs"),{promisify:t}=require("util"),{gltfAttribMap:s,gltfTopology:i,type2size:r,compType2Array:n}=require("./utils/gltf");module.exports=class extends Editor.metas.asset{constructor(e){super(e),this.verts=0,this.tris=0,this.submeshes=0,this.attributes=[],this.minPos=cc.v3(),this.maxPos=cc.v3(),this._vertexBundles=[],this._primitives=[],this._buffer=[]}static version(){return"1.0.1"}static defaultType(){return"mesh"}import(e,t){if(this._assetdb.isSubAssetByPath(e))return t();t()}async importGltf(e,t,s){const i=e.meshes[s],r=e.accessors,n=e.bufferViews;let u=[],o=0,f=0,h=i.primitives,a=cc.v3(1/0,1/0,1/0),c=cc.v3(-1/0,-1/0,-1/0);for(let e=0;e<h.length;e++){let s=h[e];if(void 0===s.indices)continue;const l=r[s.attributes.POSITION];if(l){o+=l.count;let e=l.min,t=l.max;a.x=Math.min(a.x,e[0]),a.y=Math.min(a.y,e[1]),a.z=Math.min(a.z,e[2]),c.x=Math.max(c.x,t[0]),c.y=Math.max(c.y,t[1]),c.z=Math.max(c.z,t[2]),f+=r[s.indices].count}this.generateVBBuffer(r,t,u,n,s.attributes),this.generateIBBuffer(r,t,u,n,s,e,i.name)}this.verts=o,this.tris=f/3,this.submeshes=h.length,this.attributes=h.map(e=>Object.keys(e.attributes)),this.minPos=a,this.maxPos=c,this._buffer=new Buffer(new Uint8Array(u)),await this.save()}generateVBBuffer(e,t,i,n,u){const{VertexBundle:o,BufferRange:f,VertexFormat:h}=Editor.require("unpack://engine-dev/cocos2d/core/mesh/mesh-data");let a=new f;a.offset=i.length;let c=[],l=[],m=1/0;for(let i in u){const o=s[i];if(void 0===o){Editor.error(`Found unacceptable GlTf attribute ${i}.`);continue}let f=e[u[i]];m=Math.min(f.count,m);let a=n[f.bufferView],b=new h;b.name=o,b.type=f.componentType,b.num=r[f.type],l.push(b),a.byteLength,f.count,c.push({byteLength:a.byteLength,byteOffset:a.byteOffset,perByte:a.byteStride||a.byteLength/f.count,buffer:t[a.buffer]})}for(let e=0;e<m;e++)for(let t=0;t<c.length;t++){let s=c[t],r=s.buffer,n=s.perByte,u=s.byteOffset+e*n;for(let e=0;e<n;e++)i.push(r[u+e])}a.length=i.length-a.offset;let b=new o;b.verticesCount=m,b.formats=l,b.data=a,this._vertexBundles.push(b)}generateIBBuffer(e,t,s,r,u,o,f){const{BufferRange:h,Primitive:a}=Editor.require("unpack://engine-dev/cocos2d/core/mesh/mesh-data");let c=e[u.indices],l=r[c.bufferView],m=t[l.buffer],b=new h;b.offset=s.length;let d=c.componentType;if(d>=5124&&d<=5126){Editor.warn(`Mesh [name:${f}, uuid: ${this.uuid}] IndexBuffer type is [${n[d]}], which is not support in Webgl1.`);let e=new n[d](m.buffer,l.byteOffset,c.count),t=new Uint16Array(c.count);for(let s=0;s<t.length;s++)t[s]=e[s]>65535?0:e[s];let i=new Uint8Array(t.buffer,0,t.byteLength);for(let e=0;e<t.byteLength;e++)s.push(i[e]);d=5123}else for(let e=l.byteOffset,t=l.byteOffset+l.byteLength;e<t;e++)s.push(m[e]);b.length=s.length-b.offset;let p=new a;p.vertexBundleIndices=[o],p.data=b,p.indexUnit=d,p.topology=i[u.mode],this._primitives.push(p)}async save(){let s=new(Editor.require("unpack://engine-dev/cocos2d/core/mesh/CCMesh"));s._minPos=this.minPos,s._maxPos=this.maxPos,s._primitives=this._primitives,s._vertexBundles=this._vertexBundles,s._setRawAsset(".bin"),this._assetdb.saveAssetToLibrary(this.uuid,s);let i=this._assetdb._uuidToImportPathNoExt(this.uuid)+".bin";await t(e.writeFile)(i,this._buffer)}};