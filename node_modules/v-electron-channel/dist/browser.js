'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var electron_1 = require("electron");
var pkg = require('../package.json');
var ipcFlag = pkg.name + "@" + pkg.version;
var map = {};
/**
* 注册一个通道
* @param channel
*/
function register(channel) {
    map[channel] = map[channel] || [];
    map[channel].push(-1);
}
exports.register = register;
/**
 * 删除一个通道
 * @param channel
 */
function unregister(channel) {
    var array = map[channel];
    if (!array) {
        return;
    }
    var index = array.indexOf(-1);
    if (index >= 0) {
        array.splice(index, 1);
    }
    if (array.length === 0) {
        delete map[channel];
    }
    // 同步给所有渲染进程
    var wins = electron_1.BrowserWindow.getAllWindows();
    wins.forEach(function (win) {
        if (win.isDestroyed()) {
            return;
        }
        win.webContents.send(ipcFlag + ":delete", name, -1);
    });
}
exports.unregister = unregister;
/**
 * 查询通道对应的 webContext id
 * @param channel
 */
function query(channel) {
    return map[channel] || null;
}
exports.query = query;
electron_1.ipcMain.on(ipcFlag + ":register", function (event, channel) {
    map[channel] = map[channel] || [];
    map[channel].push(event.sender.id);
});
electron_1.ipcMain.on(ipcFlag + ":unregister", function (event, channel) {
    var array = map[channel];
    if (!array) {
        return;
    }
    var index = array.indexOf(event.sender.id);
    if (index >= 0) {
        array.splice(index, 1);
    }
    if (array.length === 0) {
        delete map[channel];
    }
    // 同步给所有渲染进程
    var wins = electron_1.BrowserWindow.getAllWindows();
    wins.forEach(function (win) {
        if (win.isDestroyed()) {
            return;
        }
        win.webContents.send(ipcFlag + ":delete", name, event.sender.id);
    });
});
electron_1.ipcMain.on(ipcFlag + ":query", function (event, channel) {
    event.returnValue = query(channel);
});
