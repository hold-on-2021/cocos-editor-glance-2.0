"use strict";const{EventEmitter:EventEmitter}=require("events"),ipc=require("@base/electron-base-ipc"),pkg=require("../../package.json"),ipcFlag=`${pkg.name}@${pkg.version}`;class Profile extends EventEmitter{constructor(e,t,i){super(),this._type=t,this._file=e,this._chain=i}get(e,t){const i=ipc._events[`${ipcFlag}:get`];let s;if(Array.isArray(i)){s=i[0](null,this._type,this._file,e);for(let s=1;s<i.length;s++)i[s](null,this._type,this._file,e,t)}else s=i(null,this._type,this._file,e,t);return s}set(e,t){ipc.emit(`${ipcFlag}:set`,this._type,this._file,e,t)}remove(e){ipc.emit(`${ipcFlag}:remove`,this._type,this._file,e)}async save(){return new Promise((e,t)=>{ipc.emit(`${ipcFlag}:save`,this._type,this._file).callback(i=>{i?t(i):e()})})}async clear(){return new Promise((e,t)=>{ipc.emit(`${ipcFlag}:clear`,this._type,this._file).callback(i=>{i?t(i):e()})})}async reset(){return new Promise((e,t)=>{ipc.emit(`${ipcFlag}:reset`,this._type,this._file).callback(i=>{i?t(i):e()})})}}module.exports=Profile;